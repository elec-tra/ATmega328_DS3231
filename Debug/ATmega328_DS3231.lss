
ATmega328_DS3231.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00000fec  00001080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007b  00800180  00800180  00001100  2**0
                  ALLOC
  3 .stab         00001aa0  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f7d  00000000  00000000  00002ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003b1d  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b30  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00003b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00004164  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00004706  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00004720  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__vector_19>
  50:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ee       	ldi	r30, 0xEC	; 236
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 38       	cpi	r26, 0x80	; 128
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e8       	ldi	r26, 0x80	; 128
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 3f       	cpi	r26, 0xFB	; 251
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <main>
  9e:	0c 94 f4 07 	jmp	0xfe8	; 0xfe8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Get_Date_Time>:
#define BCD_TO_INT_L(X) (X & 0b00001111)

char date_time[36] = "Date: 00-00-2000     Time: 00:00:00";

char * Get_Date_Time()
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <Get_Date_Time+0x6>
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
	char string_pointer[2];

	//--------------Time-------------//
	//------------Seconds------------//
	Integer_to_Characters((uint8_t)BCD_TO_INT_L(i2c_data_buffer[0]), string_pointer);
  b0:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <i2c_data_buffer>
  b4:	88 2f       	mov	r24, r24
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	99 27       	eor	r25, r25
  bc:	9e 01       	movw	r18, r28
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	b9 01       	movw	r22, r18
  c4:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Integer_to_Characters>
	date_time[34] = string_pointer[0];
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__DATA_REGION_ORIGIN__+0x22>
	Integer_to_Characters((uint8_t)BCD_TO_INT_H(i2c_data_buffer[0]), string_pointer);
  ce:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <i2c_data_buffer>
  d2:	82 95       	swap	r24
  d4:	8f 70       	andi	r24, 0x0F	; 15
  d6:	88 2f       	mov	r24, r24
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	9e 01       	movw	r18, r28
  dc:	2f 5f       	subi	r18, 0xFF	; 255
  de:	3f 4f       	sbci	r19, 0xFF	; 255
  e0:	b9 01       	movw	r22, r18
  e2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Integer_to_Characters>
	date_time[33] = string_pointer[0];
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__DATA_REGION_ORIGIN__+0x21>

	//------------Minutes------------//
	Integer_to_Characters((uint8_t)BCD_TO_INT_L(i2c_data_buffer[1]), string_pointer);
  ec:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <i2c_data_buffer+0x1>
  f0:	88 2f       	mov	r24, r24
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	8f 70       	andi	r24, 0x0F	; 15
  f6:	99 27       	eor	r25, r25
  f8:	9e 01       	movw	r18, r28
  fa:	2f 5f       	subi	r18, 0xFF	; 255
  fc:	3f 4f       	sbci	r19, 0xFF	; 255
  fe:	b9 01       	movw	r22, r18
 100:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Integer_to_Characters>
	date_time[31] = string_pointer[0];
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <__DATA_REGION_ORIGIN__+0x1f>
	Integer_to_Characters((uint8_t)BCD_TO_INT_H(i2c_data_buffer[1]), string_pointer);
 10a:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <i2c_data_buffer+0x1>
 10e:	82 95       	swap	r24
 110:	8f 70       	andi	r24, 0x0F	; 15
 112:	88 2f       	mov	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	9e 01       	movw	r18, r28
 118:	2f 5f       	subi	r18, 0xFF	; 255
 11a:	3f 4f       	sbci	r19, 0xFF	; 255
 11c:	b9 01       	movw	r22, r18
 11e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Integer_to_Characters>
	date_time[30] = string_pointer[0];
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__DATA_REGION_ORIGIN__+0x1e>

	//-------------Hour--------------//
	Integer_to_Characters((uint8_t)BCD_TO_INT_L(i2c_data_buffer[2]), string_pointer);
 128:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <i2c_data_buffer+0x2>
 12c:	88 2f       	mov	r24, r24
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	99 27       	eor	r25, r25
 134:	9e 01       	movw	r18, r28
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	3f 4f       	sbci	r19, 0xFF	; 255
 13a:	b9 01       	movw	r22, r18
 13c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Integer_to_Characters>
	date_time[28] = string_pointer[0];
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__DATA_REGION_ORIGIN__+0x1c>
	Integer_to_Characters((uint8_t)(BCD_TO_INT_H(i2c_data_buffer[2]) & 0b00000001), string_pointer);
 146:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <i2c_data_buffer+0x2>
 14a:	82 95       	swap	r24
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	88 2f       	mov	r24, r24
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	81 70       	andi	r24, 0x01	; 1
 154:	99 27       	eor	r25, r25
 156:	9e 01       	movw	r18, r28
 158:	2f 5f       	subi	r18, 0xFF	; 255
 15a:	3f 4f       	sbci	r19, 0xFF	; 255
 15c:	b9 01       	movw	r22, r18
 15e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Integer_to_Characters>
	date_time[27] = string_pointer[0];
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <__DATA_REGION_ORIGIN__+0x1b>


	//-------------Date--------------//
	//--------------Day--------------//
	Integer_to_Characters((uint8_t)BCD_TO_INT_L(i2c_data_buffer[4]), string_pointer);
 168:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <i2c_data_buffer+0x4>
 16c:	88 2f       	mov	r24, r24
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	99 27       	eor	r25, r25
 174:	9e 01       	movw	r18, r28
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	b9 01       	movw	r22, r18
 17c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Integer_to_Characters>
	date_time[7] = string_pointer[0];
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
	Integer_to_Characters((uint8_t)(BCD_TO_INT_H(i2c_data_buffer[4]) & 0b00000011), string_pointer);
 186:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <i2c_data_buffer+0x4>
 18a:	82 95       	swap	r24
 18c:	8f 70       	andi	r24, 0x0F	; 15
 18e:	88 2f       	mov	r24, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	83 70       	andi	r24, 0x03	; 3
 194:	99 27       	eor	r25, r25
 196:	9e 01       	movw	r18, r28
 198:	2f 5f       	subi	r18, 0xFF	; 255
 19a:	3f 4f       	sbci	r19, 0xFF	; 255
 19c:	b9 01       	movw	r22, r18
 19e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Integer_to_Characters>
	date_time[6] = string_pointer[0];
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
 1a4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>

	//-------------Month-------------//
	Integer_to_Characters((uint8_t)BCD_TO_INT_L(i2c_data_buffer[5]), string_pointer);
 1a8:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <i2c_data_buffer+0x5>
 1ac:	88 2f       	mov	r24, r24
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	8f 70       	andi	r24, 0x0F	; 15
 1b2:	99 27       	eor	r25, r25
 1b4:	9e 01       	movw	r18, r28
 1b6:	2f 5f       	subi	r18, 0xFF	; 255
 1b8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ba:	b9 01       	movw	r22, r18
 1bc:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Integer_to_Characters>
	date_time[10] = string_pointer[0];
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__DATA_REGION_ORIGIN__+0xa>
	Integer_to_Characters((uint8_t)(BCD_TO_INT_H(i2c_data_buffer[5]) & 0b00000001), string_pointer);
 1c6:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <i2c_data_buffer+0x5>
 1ca:	82 95       	swap	r24
 1cc:	8f 70       	andi	r24, 0x0F	; 15
 1ce:	88 2f       	mov	r24, r24
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	81 70       	andi	r24, 0x01	; 1
 1d4:	99 27       	eor	r25, r25
 1d6:	9e 01       	movw	r18, r28
 1d8:	2f 5f       	subi	r18, 0xFF	; 255
 1da:	3f 4f       	sbci	r19, 0xFF	; 255
 1dc:	b9 01       	movw	r22, r18
 1de:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Integer_to_Characters>
	date_time[9] = string_pointer[0];
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
	//--------------Year-------------//
	Integer_to_Characters((uint8_t)BCD_TO_INT_L(i2c_data_buffer[6]), string_pointer);
 1e8:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <i2c_data_buffer+0x6>
 1ec:	88 2f       	mov	r24, r24
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	8f 70       	andi	r24, 0x0F	; 15
 1f2:	99 27       	eor	r25, r25
 1f4:	9e 01       	movw	r18, r28
 1f6:	2f 5f       	subi	r18, 0xFF	; 255
 1f8:	3f 4f       	sbci	r19, 0xFF	; 255
 1fa:	b9 01       	movw	r22, r18
 1fc:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Integer_to_Characters>
	date_time[15] = string_pointer[0];
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <__DATA_REGION_ORIGIN__+0xf>
	Integer_to_Characters((uint8_t)BCD_TO_INT_H(i2c_data_buffer[6]), string_pointer);
 206:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <i2c_data_buffer+0x6>
 20a:	82 95       	swap	r24
 20c:	8f 70       	andi	r24, 0x0F	; 15
 20e:	88 2f       	mov	r24, r24
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	9e 01       	movw	r18, r28
 214:	2f 5f       	subi	r18, 0xFF	; 255
 216:	3f 4f       	sbci	r19, 0xFF	; 255
 218:	b9 01       	movw	r22, r18
 21a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <Integer_to_Characters>
	date_time[14] = string_pointer[0];
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__DATA_REGION_ORIGIN__+0xe>

	return date_time;
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	91 e0       	ldi	r25, 0x01	; 1
}
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <Debug_Byte>:
 * _p: pointer to string literal
 *
 * returns: It returns formatted string literal pointer
 */
char * Debug_Byte(uint8_t _register, char * _p)
{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	65 97       	sbiw	r28, 0x15	; 21
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	8b 8b       	std	Y+19, r24	; 0x13
 248:	7d 8b       	std	Y+21, r23	; 0x15
 24a:	6c 8b       	std	Y+20, r22	; 0x14
	_p = "Hex: 0x00     U_Int: 000     ASCII: 0\0";
 24c:	85 e2       	ldi	r24, 0x25	; 37
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	9d 8b       	std	Y+21, r25	; 0x15
 252:	8c 8b       	std	Y+20, r24	; 0x14
	//----------Byte to Hex----------//
	const char hex_list[] = "0123456789ABCDEF";
 254:	81 e1       	ldi	r24, 0x11	; 17
 256:	ec e4       	ldi	r30, 0x4C	; 76
 258:	f1 e0       	ldi	r31, 0x01	; 1
 25a:	de 01       	movw	r26, r28
 25c:	12 96       	adiw	r26, 0x02	; 2
 25e:	01 90       	ld	r0, Z+
 260:	0d 92       	st	X+, r0
 262:	8a 95       	dec	r24
 264:	e1 f7       	brne	.-8      	; 0x25e <Debug_Byte+0x2c>
	uint8_t temp = _register;
 266:	8b 89       	ldd	r24, Y+19	; 0x13
 268:	89 83       	std	Y+1, r24	; 0x01
	_p[8] = hex_list[temp % 16];
 26a:	8c 89       	ldd	r24, Y+20	; 0x14
 26c:	9d 89       	ldd	r25, Y+21	; 0x15
 26e:	08 96       	adiw	r24, 0x08	; 8
 270:	29 81       	ldd	r18, Y+1	; 0x01
 272:	22 2f       	mov	r18, r18
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	2f 70       	andi	r18, 0x0F	; 15
 278:	33 27       	eor	r19, r19
 27a:	ae 01       	movw	r20, r28
 27c:	4e 5f       	subi	r20, 0xFE	; 254
 27e:	5f 4f       	sbci	r21, 0xFF	; 255
 280:	24 0f       	add	r18, r20
 282:	35 1f       	adc	r19, r21
 284:	f9 01       	movw	r30, r18
 286:	20 81       	ld	r18, Z
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
	temp = temp / 16;
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	82 95       	swap	r24
 290:	8f 70       	andi	r24, 0x0F	; 15
 292:	89 83       	std	Y+1, r24	; 0x01
	_p[7] = hex_list[temp % 16];
 294:	8c 89       	ldd	r24, Y+20	; 0x14
 296:	9d 89       	ldd	r25, Y+21	; 0x15
 298:	07 96       	adiw	r24, 0x07	; 7
 29a:	29 81       	ldd	r18, Y+1	; 0x01
 29c:	22 2f       	mov	r18, r18
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	2f 70       	andi	r18, 0x0F	; 15
 2a2:	33 27       	eor	r19, r19
 2a4:	ae 01       	movw	r20, r28
 2a6:	4e 5f       	subi	r20, 0xFE	; 254
 2a8:	5f 4f       	sbci	r21, 0xFF	; 255
 2aa:	24 0f       	add	r18, r20
 2ac:	35 1f       	adc	r19, r21
 2ae:	f9 01       	movw	r30, r18
 2b0:	20 81       	ld	r18, Z
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18

	//----Byte to Unsigned Integer---//
	temp = _register;
 2b6:	8b 89       	ldd	r24, Y+19	; 0x13
 2b8:	89 83       	std	Y+1, r24	; 0x01
	_p[23] = hex_list[temp % 10];
 2ba:	8c 89       	ldd	r24, Y+20	; 0x14
 2bc:	9d 89       	ldd	r25, Y+21	; 0x15
 2be:	9c 01       	movw	r18, r24
 2c0:	29 5e       	subi	r18, 0xE9	; 233
 2c2:	3f 4f       	sbci	r19, 0xFF	; 255
 2c4:	99 81       	ldd	r25, Y+1	; 0x01
 2c6:	8d ec       	ldi	r24, 0xCD	; 205
 2c8:	98 9f       	mul	r25, r24
 2ca:	81 2d       	mov	r24, r1
 2cc:	11 24       	eor	r1, r1
 2ce:	86 95       	lsr	r24
 2d0:	86 95       	lsr	r24
 2d2:	86 95       	lsr	r24
 2d4:	88 0f       	add	r24, r24
 2d6:	48 2f       	mov	r20, r24
 2d8:	44 0f       	add	r20, r20
 2da:	44 0f       	add	r20, r20
 2dc:	84 0f       	add	r24, r20
 2de:	f9 2f       	mov	r31, r25
 2e0:	f8 1b       	sub	r31, r24
 2e2:	8f 2f       	mov	r24, r31
 2e4:	88 2f       	mov	r24, r24
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	ae 01       	movw	r20, r28
 2ea:	4e 5f       	subi	r20, 0xFE	; 254
 2ec:	5f 4f       	sbci	r21, 0xFF	; 255
 2ee:	84 0f       	add	r24, r20
 2f0:	95 1f       	adc	r25, r21
 2f2:	fc 01       	movw	r30, r24
 2f4:	80 81       	ld	r24, Z
 2f6:	f9 01       	movw	r30, r18
 2f8:	80 83       	st	Z, r24
	temp = temp / 10;
 2fa:	99 81       	ldd	r25, Y+1	; 0x01
 2fc:	8d ec       	ldi	r24, 0xCD	; 205
 2fe:	98 9f       	mul	r25, r24
 300:	81 2d       	mov	r24, r1
 302:	11 24       	eor	r1, r1
 304:	86 95       	lsr	r24
 306:	86 95       	lsr	r24
 308:	86 95       	lsr	r24
 30a:	89 83       	std	Y+1, r24	; 0x01
	_p[22] = hex_list[temp % 10];
 30c:	8c 89       	ldd	r24, Y+20	; 0x14
 30e:	9d 89       	ldd	r25, Y+21	; 0x15
 310:	9c 01       	movw	r18, r24
 312:	2a 5e       	subi	r18, 0xEA	; 234
 314:	3f 4f       	sbci	r19, 0xFF	; 255
 316:	99 81       	ldd	r25, Y+1	; 0x01
 318:	8d ec       	ldi	r24, 0xCD	; 205
 31a:	98 9f       	mul	r25, r24
 31c:	81 2d       	mov	r24, r1
 31e:	11 24       	eor	r1, r1
 320:	86 95       	lsr	r24
 322:	86 95       	lsr	r24
 324:	86 95       	lsr	r24
 326:	88 0f       	add	r24, r24
 328:	48 2f       	mov	r20, r24
 32a:	44 0f       	add	r20, r20
 32c:	44 0f       	add	r20, r20
 32e:	84 0f       	add	r24, r20
 330:	f9 2f       	mov	r31, r25
 332:	f8 1b       	sub	r31, r24
 334:	8f 2f       	mov	r24, r31
 336:	88 2f       	mov	r24, r24
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	ae 01       	movw	r20, r28
 33c:	4e 5f       	subi	r20, 0xFE	; 254
 33e:	5f 4f       	sbci	r21, 0xFF	; 255
 340:	84 0f       	add	r24, r20
 342:	95 1f       	adc	r25, r21
 344:	fc 01       	movw	r30, r24
 346:	80 81       	ld	r24, Z
 348:	f9 01       	movw	r30, r18
 34a:	80 83       	st	Z, r24
	temp = temp / 10;
 34c:	99 81       	ldd	r25, Y+1	; 0x01
 34e:	8d ec       	ldi	r24, 0xCD	; 205
 350:	98 9f       	mul	r25, r24
 352:	81 2d       	mov	r24, r1
 354:	11 24       	eor	r1, r1
 356:	86 95       	lsr	r24
 358:	86 95       	lsr	r24
 35a:	86 95       	lsr	r24
 35c:	89 83       	std	Y+1, r24	; 0x01
	_p[21] = hex_list[temp % 10];
 35e:	8c 89       	ldd	r24, Y+20	; 0x14
 360:	9d 89       	ldd	r25, Y+21	; 0x15
 362:	9c 01       	movw	r18, r24
 364:	2b 5e       	subi	r18, 0xEB	; 235
 366:	3f 4f       	sbci	r19, 0xFF	; 255
 368:	99 81       	ldd	r25, Y+1	; 0x01
 36a:	8d ec       	ldi	r24, 0xCD	; 205
 36c:	98 9f       	mul	r25, r24
 36e:	81 2d       	mov	r24, r1
 370:	11 24       	eor	r1, r1
 372:	86 95       	lsr	r24
 374:	86 95       	lsr	r24
 376:	86 95       	lsr	r24
 378:	88 0f       	add	r24, r24
 37a:	48 2f       	mov	r20, r24
 37c:	44 0f       	add	r20, r20
 37e:	44 0f       	add	r20, r20
 380:	84 0f       	add	r24, r20
 382:	f9 2f       	mov	r31, r25
 384:	f8 1b       	sub	r31, r24
 386:	8f 2f       	mov	r24, r31
 388:	88 2f       	mov	r24, r24
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	ae 01       	movw	r20, r28
 38e:	4e 5f       	subi	r20, 0xFE	; 254
 390:	5f 4f       	sbci	r21, 0xFF	; 255
 392:	84 0f       	add	r24, r20
 394:	95 1f       	adc	r25, r21
 396:	fc 01       	movw	r30, r24
 398:	80 81       	ld	r24, Z
 39a:	f9 01       	movw	r30, r18
 39c:	80 83       	st	Z, r24

	//---------Byte to ASCII---------//
	_p[36] = (unsigned char) _register;
 39e:	8c 89       	ldd	r24, Y+20	; 0x14
 3a0:	9d 89       	ldd	r25, Y+21	; 0x15
 3a2:	84 96       	adiw	r24, 0x24	; 36
 3a4:	2b 89       	ldd	r18, Y+19	; 0x13
 3a6:	fc 01       	movw	r30, r24
 3a8:	20 83       	st	Z, r18

	return _p;
 3aa:	8c 89       	ldd	r24, Y+20	; 0x14
 3ac:	9d 89       	ldd	r25, Y+21	; 0x15
}
 3ae:	65 96       	adiw	r28, 0x15	; 21
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	f8 94       	cli
 3b4:	de bf       	out	0x3e, r29	; 62
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	cd bf       	out	0x3d, r28	; 61
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <Integer_to_Characters>:
 * _p: pointer to string literal
 *
 * returns: A character pointer pointing to character array.
 */
char * Integer_to_Characters(int integer_value, char * _p)
{
 3c0:	0f 93       	push	r16
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
 3cc:	63 97       	sbiw	r28, 0x13	; 19
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	f8 94       	cli
 3d2:	de bf       	out	0x3e, r29	; 62
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	cd bf       	out	0x3d, r28	; 61
 3d8:	99 8b       	std	Y+17, r25	; 0x11
 3da:	88 8b       	std	Y+16, r24	; 0x10
 3dc:	7b 8b       	std	Y+19, r23	; 0x13
 3de:	6a 8b       	std	Y+18, r22	; 0x12
    const char digit_list[] = "0123456789";
 3e0:	8b e0       	ldi	r24, 0x0B	; 11
 3e2:	ed e5       	ldi	r30, 0x5D	; 93
 3e4:	f1 e0       	ldi	r31, 0x01	; 1
 3e6:	de 01       	movw	r26, r28
 3e8:	15 96       	adiw	r26, 0x05	; 5
 3ea:	01 90       	ld	r0, Z+
 3ec:	0d 92       	st	X+, r0
 3ee:	8a 95       	dec	r24
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <Integer_to_Characters+0x2a>
    register char * p = _p;
 3f2:	0a 89       	ldd	r16, Y+18	; 0x12
 3f4:	1b 89       	ldd	r17, Y+19	; 0x13
    int temp = integer_value;
 3f6:	88 89       	ldd	r24, Y+16	; 0x10
 3f8:	99 89       	ldd	r25, Y+17	; 0x11
 3fa:	9a 83       	std	Y+2, r25	; 0x02
 3fc:	89 83       	std	Y+1, r24	; 0x01
    if(temp < 0)
 3fe:	89 81       	ldd	r24, Y+1	; 0x01
 400:	9a 81       	ldd	r25, Y+2	; 0x02
 402:	99 23       	and	r25, r25
 404:	74 f4       	brge	.+28     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
    {
    	*p++ = '-';
 406:	c8 01       	movw	r24, r16
 408:	8c 01       	movw	r16, r24
 40a:	0f 5f       	subi	r16, 0xFF	; 255
 40c:	1f 4f       	sbci	r17, 0xFF	; 255
 40e:	2d e2       	ldi	r18, 0x2D	; 45
 410:	fc 01       	movw	r30, r24
 412:	20 83       	st	Z, r18
        temp *= -1;
 414:	89 81       	ldd	r24, Y+1	; 0x01
 416:	9a 81       	ldd	r25, Y+2	; 0x02
 418:	91 95       	neg	r25
 41a:	81 95       	neg	r24
 41c:	91 09       	sbc	r25, r1
 41e:	9a 83       	std	Y+2, r25	; 0x02
 420:	89 83       	std	Y+1, r24	; 0x01
    }
    int _temp = temp;
 422:	89 81       	ldd	r24, Y+1	; 0x01
 424:	9a 81       	ldd	r25, Y+2	; 0x02
 426:	9c 83       	std	Y+4, r25	; 0x04
 428:	8b 83       	std	Y+3, r24	; 0x03
    do{
    	++p;
 42a:	0f 5f       	subi	r16, 0xFF	; 255
 42c:	1f 4f       	sbci	r17, 0xFF	; 255
        _temp = _temp / 10;
 42e:	8b 81       	ldd	r24, Y+3	; 0x03
 430:	9c 81       	ldd	r25, Y+4	; 0x04
 432:	2a e0       	ldi	r18, 0x0A	; 10
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	b9 01       	movw	r22, r18
 438:	0e 94 b1 06 	call	0xd62	; 0xd62 <__divmodhi4>
 43c:	cb 01       	movw	r24, r22
 43e:	9c 83       	std	Y+4, r25	; 0x04
 440:	8b 83       	std	Y+3, r24	; 0x03
    }while(_temp);
 442:	8b 81       	ldd	r24, Y+3	; 0x03
 444:	9c 81       	ldd	r25, Y+4	; 0x04
 446:	89 2b       	or	r24, r25
 448:	81 f7       	brne	.-32     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
    *p = '\0';
 44a:	f8 01       	movw	r30, r16
 44c:	10 82       	st	Z, r1
    do{
    	*--p = digit_list[temp % 10];
 44e:	01 50       	subi	r16, 0x01	; 1
 450:	11 09       	sbc	r17, r1
 452:	89 81       	ldd	r24, Y+1	; 0x01
 454:	9a 81       	ldd	r25, Y+2	; 0x02
 456:	2a e0       	ldi	r18, 0x0A	; 10
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	b9 01       	movw	r22, r18
 45c:	0e 94 b1 06 	call	0xd62	; 0xd62 <__divmodhi4>
 460:	9c 01       	movw	r18, r24
 462:	ce 01       	movw	r24, r28
 464:	05 96       	adiw	r24, 0x05	; 5
 466:	82 0f       	add	r24, r18
 468:	93 1f       	adc	r25, r19
 46a:	fc 01       	movw	r30, r24
 46c:	80 81       	ld	r24, Z
 46e:	f8 01       	movw	r30, r16
 470:	80 83       	st	Z, r24
        temp = temp / 10;
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	9a 81       	ldd	r25, Y+2	; 0x02
 476:	2a e0       	ldi	r18, 0x0A	; 10
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	b9 01       	movw	r22, r18
 47c:	0e 94 b1 06 	call	0xd62	; 0xd62 <__divmodhi4>
 480:	cb 01       	movw	r24, r22
 482:	9a 83       	std	Y+2, r25	; 0x02
 484:	89 83       	std	Y+1, r24	; 0x01
    }while(temp);
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	9a 81       	ldd	r25, Y+2	; 0x02
 48a:	89 2b       	or	r24, r25
 48c:	01 f7       	brne	.-64     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>

    return _p;
 48e:	8a 89       	ldd	r24, Y+18	; 0x12
 490:	9b 89       	ldd	r25, Y+19	; 0x13
}
 492:	63 96       	adiw	r28, 0x13	; 19
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	08 95       	ret

000004a8 <I2C_Init>:
 * peripheral for Master transmit and receive.
 *
 * returns: It returns nothing.
 */
void I2C_Init()
{
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
	//-------Set SCl Frequency-------//
	TWBR = (unsigned char) TWBR_value;	/*Pre Scaler*/
 4b0:	88 eb       	ldi	r24, 0xB8	; 184
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	28 e7       	ldi	r18, 0x78	; 120
 4b6:	fc 01       	movw	r30, r24
 4b8:	20 83       	st	Z, r18

	//-----Control Register TWCR-----//
	CLEAR_BIT(TWCR, TWIE);				/*Disable Interrupt*/
 4ba:	8c eb       	ldi	r24, 0xBC	; 188
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	2c eb       	ldi	r18, 0xBC	; 188
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	f9 01       	movw	r30, r18
 4c4:	20 81       	ld	r18, Z
 4c6:	2e 7f       	andi	r18, 0xFE	; 254
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 83       	st	Z, r18
	CLEAR_BIT(TWCR, TWEN);				/*Disable TWI*/
 4cc:	8c eb       	ldi	r24, 0xBC	; 188
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	2c eb       	ldi	r18, 0xBC	; 188
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	f9 01       	movw	r30, r18
 4d6:	20 81       	ld	r18, Z
 4d8:	2b 7f       	andi	r18, 0xFB	; 251
 4da:	fc 01       	movw	r30, r24
 4dc:	20 83       	st	Z, r18
	CLEAR_BIT(TWCR, TWSTO);				/*No Stop Signal*/
 4de:	8c eb       	ldi	r24, 0xBC	; 188
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	2c eb       	ldi	r18, 0xBC	; 188
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	f9 01       	movw	r30, r18
 4e8:	20 81       	ld	r18, Z
 4ea:	2f 7e       	andi	r18, 0xEF	; 239
 4ec:	fc 01       	movw	r30, r24
 4ee:	20 83       	st	Z, r18
	CLEAR_BIT(TWCR, TWSTA);				/*No Start Signal*/
 4f0:	8c eb       	ldi	r24, 0xBC	; 188
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	2c eb       	ldi	r18, 0xBC	; 188
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	f9 01       	movw	r30, r18
 4fa:	20 81       	ld	r18, Z
 4fc:	2f 7d       	andi	r18, 0xDF	; 223
 4fe:	fc 01       	movw	r30, r24
 500:	20 83       	st	Z, r18
	CLEAR_BIT(TWCR, TWEA);				/*Disable Automatic Acknowledge*/
 502:	8c eb       	ldi	r24, 0xBC	; 188
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	2c eb       	ldi	r18, 0xBC	; 188
 508:	30 e0       	ldi	r19, 0x00	; 0
 50a:	f9 01       	movw	r30, r18
 50c:	20 81       	ld	r18, Z
 50e:	2f 7b       	andi	r18, 0xBF	; 191
 510:	fc 01       	movw	r30, r24
 512:	20 83       	st	Z, r18
	CLEAR_BIT(TWCR, TWINT);				/*Ready for New Job*/
 514:	8c eb       	ldi	r24, 0xBC	; 188
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	2c eb       	ldi	r18, 0xBC	; 188
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	f9 01       	movw	r30, r18
 51e:	20 81       	ld	r18, Z
 520:	2f 77       	andi	r18, 0x7F	; 127
 522:	fc 01       	movw	r30, r24
 524:	20 83       	st	Z, r18

	//--------Set Pre-Scaler---------//
	CLEAR_BIT(TWSR, TWPS0);				/*Pre-Scaler is 1*/
 526:	89 eb       	ldi	r24, 0xB9	; 185
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	29 eb       	ldi	r18, 0xB9	; 185
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	f9 01       	movw	r30, r18
 530:	20 81       	ld	r18, Z
 532:	2e 7f       	andi	r18, 0xFE	; 254
 534:	fc 01       	movw	r30, r24
 536:	20 83       	st	Z, r18
	CLEAR_BIT(TWSR, TWPS1);				/*Pre-Scaler is 1*/
 538:	89 eb       	ldi	r24, 0xB9	; 185
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	29 eb       	ldi	r18, 0xB9	; 185
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	f9 01       	movw	r30, r18
 542:	20 81       	ld	r18, Z
 544:	2d 7f       	andi	r18, 0xFD	; 253
 546:	fc 01       	movw	r30, r24
 548:	20 83       	st	Z, r18

	//Set I2C Address for Master(MCU)//
	TWAR = 0b11111110;					/*MCU I2C Address*/
 54a:	8a eb       	ldi	r24, 0xBA	; 186
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	2e ef       	ldi	r18, 0xFE	; 254
 550:	fc 01       	movw	r30, r24
 552:	20 83       	st	Z, r18
	CLEAR_BIT(TWAR, TWGCE);				/*Disable I2C General Call*/
 554:	8a eb       	ldi	r24, 0xBA	; 186
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	2a eb       	ldi	r18, 0xBA	; 186
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	f9 01       	movw	r30, r18
 55e:	20 81       	ld	r18, Z
 560:	2e 7f       	andi	r18, 0xFE	; 254
 562:	fc 01       	movw	r30, r24
 564:	20 83       	st	Z, r18

	//---Set Address Mask Register--//
	TWAMR = 0b00000000;					/*Enable Address comparison for all Bits*/
 566:	8d eb       	ldi	r24, 0xBD	; 189
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	fc 01       	movw	r30, r24
 56c:	10 82       	st	Z, r1

	//----------Enable TWI----------//
	SET_BIT(TWCR, TWEN);				/*Enable TWI*/
 56e:	8c eb       	ldi	r24, 0xBC	; 188
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	2c eb       	ldi	r18, 0xBC	; 188
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	f9 01       	movw	r30, r18
 578:	20 81       	ld	r18, Z
 57a:	24 60       	ori	r18, 0x04	; 4
 57c:	fc 01       	movw	r30, r24
 57e:	20 83       	st	Z, r18
}
 580:	00 00       	nop
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	08 95       	ret

00000588 <I2C_Start_Communication>:
 * slave_addr: 7-bit address of target slave
 *
 * returns: It returns nothing.
 */
void I2C_Start_Communication(uint8_t slave_addr)
{
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	1f 92       	push	r1
 58e:	cd b7       	in	r28, 0x3d	; 61
 590:	de b7       	in	r29, 0x3e	; 62
 592:	89 83       	std	Y+1, r24	; 0x01
	p = i2c_data_buffer;
 594:	86 ee       	ldi	r24, 0xE6	; 230
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <p+0x1>
 59c:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <p>

	SET_BIT(TWCR, TWSTA);				/*Give Start Signal*/
 5a0:	8c eb       	ldi	r24, 0xBC	; 188
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	2c eb       	ldi	r18, 0xBC	; 188
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	f9 01       	movw	r30, r18
 5aa:	20 81       	ld	r18, Z
 5ac:	20 62       	ori	r18, 0x20	; 32
 5ae:	fc 01       	movw	r30, r24
 5b0:	20 83       	st	Z, r18
	SET_BIT(TWCR, TWINT);				/*Ready for New Job*/
 5b2:	8c eb       	ldi	r24, 0xBC	; 188
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	2c eb       	ldi	r18, 0xBC	; 188
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	f9 01       	movw	r30, r18
 5bc:	20 81       	ld	r18, Z
 5be:	20 68       	ori	r18, 0x80	; 128
 5c0:	fc 01       	movw	r30, r24
 5c2:	20 83       	st	Z, r18
	slave_address = slave_addr;
 5c4:	89 81       	ldd	r24, Y+1	; 0x01
 5c6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <slave_address>
}
 5ca:	00 00       	nop
 5cc:	0f 90       	pop	r0
 5ce:	df 91       	pop	r29
 5d0:	cf 91       	pop	r28
 5d2:	08 95       	ret

000005d4 <I2C_Do_Communication>:
 * 			Note: "1" means I2C Communication was successful
 * 				  "0" means I2C Communication is not completed
 * 				   yet
 */
uint8_t I2C_Do_Communication()
{
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	cd b7       	in	r28, 0x3d	; 61
 5da:	de b7       	in	r29, 0x3e	; 62
//	char * debug_message;
//	USART0_Send_Data(Debug_Byte((uint8_t) TWSR, debug_message));
//	_delay_ms(4);

	//-------Mater Transmitter------//
	if(TWSR == 0x08)					/*Start Signal Sent Successfully*/
 5dc:	89 eb       	ldi	r24, 0xB9	; 185
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	fc 01       	movw	r30, r24
 5e2:	80 81       	ld	r24, Z
 5e4:	88 30       	cpi	r24, 0x08	; 8
 5e6:	81 f4       	brne	.+32     	; 0x608 <I2C_Do_Communication+0x34>
		 * checking status of I2C.It can
		 * be if debug is not needed
		 */
//		USART0_Send_Data("Step 1");

		TWDR = WRITE_OPERATION(slave_address);
 5e8:	8b eb       	ldi	r24, 0xBB	; 187
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <slave_address>
 5f0:	22 0f       	add	r18, r18
 5f2:	fc 01       	movw	r30, r24
 5f4:	20 83       	st	Z, r18
										/*Configure the slave for writing into slave*/
		CLEAR_BIT(TWCR, TWSTA);			/*No more Start Signal needed*/
 5f6:	8c eb       	ldi	r24, 0xBC	; 188
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	2c eb       	ldi	r18, 0xBC	; 188
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	f9 01       	movw	r30, r18
 600:	20 81       	ld	r18, Z
 602:	2f 7d       	andi	r18, 0xDF	; 223
 604:	fc 01       	movw	r30, r24
 606:	20 83       	st	Z, r18
	}
	if(TWSR == 0x18)					/*SLA+W has been transmitted Successfully*/
 608:	89 eb       	ldi	r24, 0xB9	; 185
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	fc 01       	movw	r30, r24
 60e:	80 81       	ld	r24, Z
 610:	88 31       	cpi	r24, 0x18	; 24
 612:	21 f4       	brne	.+8      	; 0x61c <I2C_Do_Communication+0x48>
	{
//		USART0_Send_Data("Step 2");

		TWDR = 0x00;					/*Set Slave Address pointer to address 0x00*/
 614:	8b eb       	ldi	r24, 0xBB	; 187
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	fc 01       	movw	r30, r24
 61a:	10 82       	st	Z, r1
	}
	if(TWSR == 0x28)					/*Data  byte  has  been  transmitted Successfully*/
 61c:	89 eb       	ldi	r24, 0xB9	; 185
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	fc 01       	movw	r30, r24
 622:	80 81       	ld	r24, Z
 624:	88 32       	cpi	r24, 0x28	; 40
 626:	49 f4       	brne	.+18     	; 0x63a <I2C_Do_Communication+0x66>
	{
//		USART0_Send_Data("Step 3");

		SET_BIT(TWCR, TWSTA);			/*Give Repeated Start Signal*/
 628:	8c eb       	ldi	r24, 0xBC	; 188
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	2c eb       	ldi	r18, 0xBC	; 188
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	f9 01       	movw	r30, r18
 632:	20 81       	ld	r18, Z
 634:	20 62       	ori	r18, 0x20	; 32
 636:	fc 01       	movw	r30, r24
 638:	20 83       	st	Z, r18
	}
	if(TWSR == 0x10)					/*Repeated Start Signal sent Successfully*/
 63a:	89 eb       	ldi	r24, 0xB9	; 185
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	fc 01       	movw	r30, r24
 640:	80 81       	ld	r24, Z
 642:	80 31       	cpi	r24, 0x10	; 16
 644:	a1 f4       	brne	.+40     	; 0x66e <I2C_Do_Communication+0x9a>
	{
//		USART0_Send_Data("Step 4");

		TWDR = READ_OPERATION(slave_address);
 646:	8b eb       	ldi	r24, 0xBB	; 187
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <slave_address>
 64e:	22 2f       	mov	r18, r18
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	22 0f       	add	r18, r18
 654:	33 1f       	adc	r19, r19
 656:	21 60       	ori	r18, 0x01	; 1
 658:	fc 01       	movw	r30, r24
 65a:	20 83       	st	Z, r18
										/*Configure the slave for reading from slave*/
		CLEAR_BIT(TWCR, TWSTA);			/*No more Start Signal needed*/
 65c:	8c eb       	ldi	r24, 0xBC	; 188
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	2c eb       	ldi	r18, 0xBC	; 188
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	f9 01       	movw	r30, r18
 666:	20 81       	ld	r18, Z
 668:	2f 7d       	andi	r18, 0xDF	; 223
 66a:	fc 01       	movw	r30, r24
 66c:	20 83       	st	Z, r18
	}

	//--------Mater Receiver--------//
	if(TWSR == 0x40)					/*Slave configure as transmitter successfully*/
 66e:	89 eb       	ldi	r24, 0xB9	; 185
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	fc 01       	movw	r30, r24
 674:	80 81       	ld	r24, Z
 676:	80 34       	cpi	r24, 0x40	; 64
 678:	49 f4       	brne	.+18     	; 0x68c <I2C_Do_Communication+0xb8>
	{
//		USART0_Send_Data("Step 5");

		SET_BIT(TWCR, TWEA);			/*Enable Acknowledge for upcomming data*/
 67a:	8c eb       	ldi	r24, 0xBC	; 188
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	2c eb       	ldi	r18, 0xBC	; 188
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	f9 01       	movw	r30, r18
 684:	20 81       	ld	r18, Z
 686:	20 64       	ori	r18, 0x40	; 64
 688:	fc 01       	movw	r30, r24
 68a:	20 83       	st	Z, r18
	}
	if(TWSR == 0x50)					/*Slave started transmitting data bytes*/
 68c:	89 eb       	ldi	r24, 0xB9	; 185
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	fc 01       	movw	r30, r24
 692:	80 81       	ld	r24, Z
 694:	80 35       	cpi	r24, 0x50	; 80
 696:	09 f0       	breq	.+2      	; 0x69a <I2C_Do_Communication+0xc6>
 698:	46 c0       	rjmp	.+140    	; 0x726 <I2C_Do_Communication+0x152>
	{
		if((p - i2c_data_buffer) <= 16)	/*Receive all bytes except last byte - with acknowledgement*/
 69a:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <p>
 69e:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <p+0x1>
 6a2:	9c 01       	movw	r18, r24
 6a4:	86 ee       	ldi	r24, 0xE6	; 230
 6a6:	91 e0       	ldi	r25, 0x01	; 1
 6a8:	a9 01       	movw	r20, r18
 6aa:	48 1b       	sub	r20, r24
 6ac:	59 0b       	sbc	r21, r25
 6ae:	ca 01       	movw	r24, r20
 6b0:	41 97       	sbiw	r24, 0x11	; 17
 6b2:	94 f4       	brge	.+36     	; 0x6d8 <I2C_Do_Communication+0x104>
		{
//			USART0_Send_Data("Step 6");

			*p++ = TWDR;				/*Store received bytes to buffer*/
 6b4:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <p>
 6b8:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <p+0x1>
 6bc:	9c 01       	movw	r18, r24
 6be:	2f 5f       	subi	r18, 0xFF	; 255
 6c0:	3f 4f       	sbci	r19, 0xFF	; 255
 6c2:	30 93 fa 01 	sts	0x01FA, r19	; 0x8001fa <p+0x1>
 6c6:	20 93 f9 01 	sts	0x01F9, r18	; 0x8001f9 <p>
 6ca:	2b eb       	ldi	r18, 0xBB	; 187
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	f9 01       	movw	r30, r18
 6d0:	20 81       	ld	r18, Z
 6d2:	fc 01       	movw	r30, r24
 6d4:	20 83       	st	Z, r18
 6d6:	27 c0       	rjmp	.+78     	; 0x726 <I2C_Do_Communication+0x152>
		}
		else if((p - i2c_data_buffer) == 17)
 6d8:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <p>
 6dc:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <p+0x1>
 6e0:	9c 01       	movw	r18, r24
 6e2:	86 ee       	ldi	r24, 0xE6	; 230
 6e4:	91 e0       	ldi	r25, 0x01	; 1
 6e6:	a9 01       	movw	r20, r18
 6e8:	48 1b       	sub	r20, r24
 6ea:	59 0b       	sbc	r21, r25
 6ec:	ca 01       	movw	r24, r20
 6ee:	41 97       	sbiw	r24, 0x11	; 17
 6f0:	d1 f4       	brne	.+52     	; 0x726 <I2C_Do_Communication+0x152>
										/*Receive last byte - without acknowledgement*/
		{
//			USART0_Send_Data("Step 7");

			CLEAR_BIT(TWCR, TWEA);		/*Send Not Acknowledge - To stop slave Data transmit*/
 6f2:	8c eb       	ldi	r24, 0xBC	; 188
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	2c eb       	ldi	r18, 0xBC	; 188
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	f9 01       	movw	r30, r18
 6fc:	20 81       	ld	r18, Z
 6fe:	2f 7b       	andi	r18, 0xBF	; 191
 700:	fc 01       	movw	r30, r24
 702:	20 83       	st	Z, r18
			*p++ = TWDR;				/*Store last byte*/
 704:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <p>
 708:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <p+0x1>
 70c:	9c 01       	movw	r18, r24
 70e:	2f 5f       	subi	r18, 0xFF	; 255
 710:	3f 4f       	sbci	r19, 0xFF	; 255
 712:	30 93 fa 01 	sts	0x01FA, r19	; 0x8001fa <p+0x1>
 716:	20 93 f9 01 	sts	0x01F9, r18	; 0x8001f9 <p>
 71a:	2b eb       	ldi	r18, 0xBB	; 187
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	f9 01       	movw	r30, r18
 720:	20 81       	ld	r18, Z
 722:	fc 01       	movw	r30, r24
 724:	20 83       	st	Z, r18
		}
	}
	if(TWSR == 0x58)
 726:	89 eb       	ldi	r24, 0xB9	; 185
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	fc 01       	movw	r30, r24
 72c:	80 81       	ld	r24, Z
 72e:	88 35       	cpi	r24, 0x58	; 88
 730:	d1 f4       	brne	.+52     	; 0x766 <I2C_Do_Communication+0x192>
	{
//		USART0_Send_Data("Step 8");

		*p = '\0';						/*Terminate buffer with null character*/
 732:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <p>
 736:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <p+0x1>
 73a:	fc 01       	movw	r30, r24
 73c:	10 82       	st	Z, r1
		SET_BIT(TWCR, TWSTO);			/*Send Stop Signal*/
 73e:	8c eb       	ldi	r24, 0xBC	; 188
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	2c eb       	ldi	r18, 0xBC	; 188
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	f9 01       	movw	r30, r18
 748:	20 81       	ld	r18, Z
 74a:	20 61       	ori	r18, 0x10	; 16
 74c:	fc 01       	movw	r30, r24
 74e:	20 83       	st	Z, r18
		SET_BIT(TWCR, TWINT);			/*Continue the Job*/
 750:	8c eb       	ldi	r24, 0xBC	; 188
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	2c eb       	ldi	r18, 0xBC	; 188
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	f9 01       	movw	r30, r18
 75a:	20 81       	ld	r18, Z
 75c:	20 68       	ori	r18, 0x80	; 128
 75e:	fc 01       	movw	r30, r24
 760:	20 83       	st	Z, r18
		return 1;						/*"1" means I2C Communication was successful*/
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	0a c0       	rjmp	.+20     	; 0x77a <I2C_Do_Communication+0x1a6>
	}

	SET_BIT(TWCR, TWINT);				/*Continue the Job*/
 766:	8c eb       	ldi	r24, 0xBC	; 188
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	2c eb       	ldi	r18, 0xBC	; 188
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	f9 01       	movw	r30, r18
 770:	20 81       	ld	r18, Z
 772:	20 68       	ori	r18, 0x80	; 128
 774:	fc 01       	movw	r30, r24
 776:	20 83       	st	Z, r18
	return 0;							/*"0" means I2C Communication is not completed yet*/
 778:	80 e0       	ldi	r24, 0x00	; 0
}
 77a:	df 91       	pop	r29
 77c:	cf 91       	pop	r28
 77e:	08 95       	ret

00000780 <I2C_Stop_Communication>:
 * It disable TWI peripheral
 *
 * returns: It returns nothing.
 */
void I2C_Stop_Communication()
{
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
	//----------Disable TWI----------//
	CLEAR_BIT(TWCR, TWEN);				/*Disable TWI*/
 788:	8c eb       	ldi	r24, 0xBC	; 188
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	2c eb       	ldi	r18, 0xBC	; 188
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	f9 01       	movw	r30, r18
 792:	20 81       	ld	r18, Z
 794:	2b 7f       	andi	r18, 0xFB	; 251
 796:	fc 01       	movw	r30, r24
 798:	20 83       	st	Z, r18
}
 79a:	00 00       	nop
 79c:	df 91       	pop	r29
 79e:	cf 91       	pop	r28
 7a0:	08 95       	ret

000007a2 <main>:
#define FOSC 16000000 					/*MCU Clock Speed*/
#define BAUD 115200						/*Required Baud Rate*/
#define MYUBRR ((FOSC/16/BAUD)-1)

int main(void)
{
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	6c 97       	sbiw	r28, 0x1c	; 28
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	f8 94       	cli
 7b0:	de bf       	out	0x3e, r29	; 62
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	cd bf       	out	0x3d, r28	; 61
	//-------------Inits-------------//
	/*POWER MANAGEMENT*/
	DISABLE_ADC; ENABLE_I2C;			/*Disable ADC*/ /*ENABLE I2C*/
 7b6:	84 e6       	ldi	r24, 0x64	; 100
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	24 e6       	ldi	r18, 0x64	; 100
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	f9 01       	movw	r30, r18
 7c0:	20 81       	ld	r18, Z
 7c2:	21 60       	ori	r18, 0x01	; 1
 7c4:	fc 01       	movw	r30, r24
 7c6:	20 83       	st	Z, r18
 7c8:	84 e6       	ldi	r24, 0x64	; 100
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	24 e6       	ldi	r18, 0x64	; 100
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	f9 01       	movw	r30, r18
 7d2:	20 81       	ld	r18, Z
 7d4:	2f 77       	andi	r18, 0x7F	; 127
 7d6:	fc 01       	movw	r30, r24
 7d8:	20 83       	st	Z, r18
	DISABLE_SPI; DISABLE_TIMER0;		/*Disable SPI*/ /*DISABLE TIMER0*/
 7da:	84 e6       	ldi	r24, 0x64	; 100
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	24 e6       	ldi	r18, 0x64	; 100
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	f9 01       	movw	r30, r18
 7e4:	20 81       	ld	r18, Z
 7e6:	24 60       	ori	r18, 0x04	; 4
 7e8:	fc 01       	movw	r30, r24
 7ea:	20 83       	st	Z, r18
 7ec:	84 e6       	ldi	r24, 0x64	; 100
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	24 e6       	ldi	r18, 0x64	; 100
 7f2:	30 e0       	ldi	r19, 0x00	; 0
 7f4:	f9 01       	movw	r30, r18
 7f6:	20 81       	ld	r18, Z
 7f8:	20 62       	ori	r18, 0x20	; 32
 7fa:	fc 01       	movw	r30, r24
 7fc:	20 83       	st	Z, r18
	DISABLE_TIMER1; DISABLE_TIMER2;		/*Disable TIMER1*/ /*DISABLE TIMER2*/
 7fe:	84 e6       	ldi	r24, 0x64	; 100
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	24 e6       	ldi	r18, 0x64	; 100
 804:	30 e0       	ldi	r19, 0x00	; 0
 806:	f9 01       	movw	r30, r18
 808:	20 81       	ld	r18, Z
 80a:	28 60       	ori	r18, 0x08	; 8
 80c:	fc 01       	movw	r30, r24
 80e:	20 83       	st	Z, r18
 810:	84 e6       	ldi	r24, 0x64	; 100
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	24 e6       	ldi	r18, 0x64	; 100
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	f9 01       	movw	r30, r18
 81a:	20 81       	ld	r18, Z
 81c:	20 64       	ori	r18, 0x40	; 64
 81e:	fc 01       	movw	r30, r24
 820:	20 83       	st	Z, r18
	ENABLE_USART0;						/*Enable USART0*/
 822:	84 e6       	ldi	r24, 0x64	; 100
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	24 e6       	ldi	r18, 0x64	; 100
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	f9 01       	movw	r30, r18
 82c:	20 81       	ld	r18, Z
 82e:	2d 7f       	andi	r18, 0xFD	; 253
 830:	fc 01       	movw	r30, r24
 832:	20 83       	st	Z, r18
	/*GPIO*/
	SET_BIT(DDRB, PB5);					/*Pin PB5 as Output*/
 834:	84 e2       	ldi	r24, 0x24	; 36
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	24 e2       	ldi	r18, 0x24	; 36
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	f9 01       	movw	r30, r18
 83e:	20 81       	ld	r18, Z
 840:	20 62       	ori	r18, 0x20	; 32
 842:	fc 01       	movw	r30, r24
 844:	20 83       	st	Z, r18
	CLEAR_BIT(PORTB, PB5);				/*Clear PB5 Bit*/
 846:	85 e2       	ldi	r24, 0x25	; 37
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	25 e2       	ldi	r18, 0x25	; 37
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	f9 01       	movw	r30, r18
 850:	20 81       	ld	r18, Z
 852:	2f 7d       	andi	r18, 0xDF	; 223
 854:	fc 01       	movw	r30, r24
 856:	20 83       	st	Z, r18
	/*UART0*/
	USART0_Init(MYUBRR);
 858:	87 e0       	ldi	r24, 0x07	; 7
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0e 94 44 05 	call	0xa88	; 0xa88 <USART0_Init>
	/*I2C*/
	I2C_Init();
 860:	0e 94 54 02 	call	0x4a8	; 0x4a8 <I2C_Init>
	/*Interrupt*/
	SET_BIT(SREG, 7);					/*Enable Interrupt*/
 864:	8f e5       	ldi	r24, 0x5F	; 95
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	2f e5       	ldi	r18, 0x5F	; 95
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	f9 01       	movw	r30, r18
 86e:	20 81       	ld	r18, Z
 870:	20 68       	ori	r18, 0x80	; 128
 872:	fc 01       	movw	r30, r24
 874:	20 83       	st	Z, r18

	/*USART0 Transmit Example*/
	USART0_Send_Data("Serial Test Message...");
 876:	88 e6       	ldi	r24, 0x68	; 104
 878:	91 e0       	ldi	r25, 0x01	; 1
 87a:	0e 94 00 06 	call	0xc00	; 0xc00 <USART0_Send_Data>
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	a0 ea       	ldi	r26, 0xA0	; 160
 884:	b0 e4       	ldi	r27, 0x40	; 64
 886:	8d 83       	std	Y+5, r24	; 0x05
 888:	9e 83       	std	Y+6, r25	; 0x06
 88a:	af 83       	std	Y+7, r26	; 0x07
 88c:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 88e:	20 e0       	ldi	r18, 0x00	; 0
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	4a e7       	ldi	r20, 0x7A	; 122
 894:	55 e4       	ldi	r21, 0x45	; 69
 896:	6d 81       	ldd	r22, Y+5	; 0x05
 898:	7e 81       	ldd	r23, Y+6	; 0x06
 89a:	8f 81       	ldd	r24, Y+7	; 0x07
 89c:	98 85       	ldd	r25, Y+8	; 0x08
 89e:	0e 94 5f 07 	call	0xebe	; 0xebe <__mulsf3>
 8a2:	dc 01       	movw	r26, r24
 8a4:	cb 01       	movw	r24, r22
 8a6:	89 87       	std	Y+9, r24	; 0x09
 8a8:	9a 87       	std	Y+10, r25	; 0x0a
 8aa:	ab 87       	std	Y+11, r26	; 0x0b
 8ac:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
 8ae:	20 e0       	ldi	r18, 0x00	; 0
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	40 e8       	ldi	r20, 0x80	; 128
 8b4:	5f e3       	ldi	r21, 0x3F	; 63
 8b6:	69 85       	ldd	r22, Y+9	; 0x09
 8b8:	7a 85       	ldd	r23, Y+10	; 0x0a
 8ba:	8b 85       	ldd	r24, Y+11	; 0x0b
 8bc:	9c 85       	ldd	r25, Y+12	; 0x0c
 8be:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__cmpsf2>
 8c2:	88 23       	and	r24, r24
 8c4:	2c f4       	brge	.+10     	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
		__ticks = 1;
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	9e 87       	std	Y+14, r25	; 0x0e
 8cc:	8d 87       	std	Y+13, r24	; 0x0d
 8ce:	3f c0       	rjmp	.+126    	; 0x94e <__stack+0x4f>
	else if (__tmp > 65535)
 8d0:	20 e0       	ldi	r18, 0x00	; 0
 8d2:	3f ef       	ldi	r19, 0xFF	; 255
 8d4:	4f e7       	ldi	r20, 0x7F	; 127
 8d6:	57 e4       	ldi	r21, 0x47	; 71
 8d8:	69 85       	ldd	r22, Y+9	; 0x09
 8da:	7a 85       	ldd	r23, Y+10	; 0x0a
 8dc:	8b 85       	ldd	r24, Y+11	; 0x0b
 8de:	9c 85       	ldd	r25, Y+12	; 0x0c
 8e0:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__gesf2>
 8e4:	18 16       	cp	r1, r24
 8e6:	4c f5       	brge	.+82     	; 0x93a <__stack+0x3b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	40 e2       	ldi	r20, 0x20	; 32
 8ee:	51 e4       	ldi	r21, 0x41	; 65
 8f0:	6d 81       	ldd	r22, Y+5	; 0x05
 8f2:	7e 81       	ldd	r23, Y+6	; 0x06
 8f4:	8f 81       	ldd	r24, Y+7	; 0x07
 8f6:	98 85       	ldd	r25, Y+8	; 0x08
 8f8:	0e 94 5f 07 	call	0xebe	; 0xebe <__mulsf3>
 8fc:	dc 01       	movw	r26, r24
 8fe:	cb 01       	movw	r24, r22
 900:	bc 01       	movw	r22, r24
 902:	cd 01       	movw	r24, r26
 904:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fixunssfsi>
 908:	dc 01       	movw	r26, r24
 90a:	cb 01       	movw	r24, r22
 90c:	9e 87       	std	Y+14, r25	; 0x0e
 90e:	8d 87       	std	Y+13, r24	; 0x0d
 910:	0f c0       	rjmp	.+30     	; 0x930 <__stack+0x31>
 912:	80 e9       	ldi	r24, 0x90	; 144
 914:	91 e0       	ldi	r25, 0x01	; 1
 916:	98 8b       	std	Y+16, r25	; 0x10
 918:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 91a:	8f 85       	ldd	r24, Y+15	; 0x0f
 91c:	98 89       	ldd	r25, Y+16	; 0x10
 91e:	01 97       	sbiw	r24, 0x01	; 1
 920:	f1 f7       	brne	.-4      	; 0x91e <__stack+0x1f>
 922:	98 8b       	std	Y+16, r25	; 0x10
 924:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 926:	8d 85       	ldd	r24, Y+13	; 0x0d
 928:	9e 85       	ldd	r25, Y+14	; 0x0e
 92a:	01 97       	sbiw	r24, 0x01	; 1
 92c:	9e 87       	std	Y+14, r25	; 0x0e
 92e:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 930:	8d 85       	ldd	r24, Y+13	; 0x0d
 932:	9e 85       	ldd	r25, Y+14	; 0x0e
 934:	89 2b       	or	r24, r25
 936:	69 f7       	brne	.-38     	; 0x912 <__stack+0x13>
 938:	14 c0       	rjmp	.+40     	; 0x962 <__stack+0x63>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 93a:	69 85       	ldd	r22, Y+9	; 0x09
 93c:	7a 85       	ldd	r23, Y+10	; 0x0a
 93e:	8b 85       	ldd	r24, Y+11	; 0x0b
 940:	9c 85       	ldd	r25, Y+12	; 0x0c
 942:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fixunssfsi>
 946:	dc 01       	movw	r26, r24
 948:	cb 01       	movw	r24, r22
 94a:	9e 87       	std	Y+14, r25	; 0x0e
 94c:	8d 87       	std	Y+13, r24	; 0x0d
 94e:	8d 85       	ldd	r24, Y+13	; 0x0d
 950:	9e 85       	ldd	r25, Y+14	; 0x0e
 952:	9a 8b       	std	Y+18, r25	; 0x12
 954:	89 8b       	std	Y+17, r24	; 0x11
 956:	89 89       	ldd	r24, Y+17	; 0x11
 958:	9a 89       	ldd	r25, Y+18	; 0x12
 95a:	01 97       	sbiw	r24, 0x01	; 1
 95c:	f1 f7       	brne	.-4      	; 0x95a <__stack+0x5b>
 95e:	9a 8b       	std	Y+18, r25	; 0x12
 960:	89 8b       	std	Y+17, r24	; 0x11
	_delay_ms(5);

	/*Start I2C for first time*/
	I2C_Start_Communication(SLAVE_ADDRESS);
 962:	88 e6       	ldi	r24, 0x68	; 104
 964:	0e 94 c4 02 	call	0x588	; 0x588 <I2C_Start_Communication>

	//-----------Event loop----------//
	while (1)
	{
		/*Blink LED Example*/
		TOGGLE_BIT(PORTB, PB5);
 968:	85 e2       	ldi	r24, 0x25	; 37
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	25 e2       	ldi	r18, 0x25	; 37
 96e:	30 e0       	ldi	r19, 0x00	; 0
 970:	f9 01       	movw	r30, r18
 972:	30 81       	ld	r19, Z
 974:	20 e2       	ldi	r18, 0x20	; 32
 976:	23 27       	eor	r18, r19
 978:	fc 01       	movw	r30, r24
 97a:	20 83       	st	Z, r18
 97c:	80 e0       	ldi	r24, 0x00	; 0
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	a8 e4       	ldi	r26, 0x48	; 72
 982:	b2 e4       	ldi	r27, 0x42	; 66
 984:	89 83       	std	Y+1, r24	; 0x01
 986:	9a 83       	std	Y+2, r25	; 0x02
 988:	ab 83       	std	Y+3, r26	; 0x03
 98a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 98c:	20 e0       	ldi	r18, 0x00	; 0
 98e:	30 e0       	ldi	r19, 0x00	; 0
 990:	4a e7       	ldi	r20, 0x7A	; 122
 992:	55 e4       	ldi	r21, 0x45	; 69
 994:	69 81       	ldd	r22, Y+1	; 0x01
 996:	7a 81       	ldd	r23, Y+2	; 0x02
 998:	8b 81       	ldd	r24, Y+3	; 0x03
 99a:	9c 81       	ldd	r25, Y+4	; 0x04
 99c:	0e 94 5f 07 	call	0xebe	; 0xebe <__mulsf3>
 9a0:	dc 01       	movw	r26, r24
 9a2:	cb 01       	movw	r24, r22
 9a4:	8b 8b       	std	Y+19, r24	; 0x13
 9a6:	9c 8b       	std	Y+20, r25	; 0x14
 9a8:	ad 8b       	std	Y+21, r26	; 0x15
 9aa:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 9ac:	20 e0       	ldi	r18, 0x00	; 0
 9ae:	30 e0       	ldi	r19, 0x00	; 0
 9b0:	40 e8       	ldi	r20, 0x80	; 128
 9b2:	5f e3       	ldi	r21, 0x3F	; 63
 9b4:	6b 89       	ldd	r22, Y+19	; 0x13
 9b6:	7c 89       	ldd	r23, Y+20	; 0x14
 9b8:	8d 89       	ldd	r24, Y+21	; 0x15
 9ba:	9e 89       	ldd	r25, Y+22	; 0x16
 9bc:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__cmpsf2>
 9c0:	88 23       	and	r24, r24
 9c2:	2c f4       	brge	.+10     	; 0x9ce <__stack+0xcf>
		__ticks = 1;
 9c4:	81 e0       	ldi	r24, 0x01	; 1
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	98 8f       	std	Y+24, r25	; 0x18
 9ca:	8f 8b       	std	Y+23, r24	; 0x17
 9cc:	3f c0       	rjmp	.+126    	; 0xa4c <__stack+0x14d>
	else if (__tmp > 65535)
 9ce:	20 e0       	ldi	r18, 0x00	; 0
 9d0:	3f ef       	ldi	r19, 0xFF	; 255
 9d2:	4f e7       	ldi	r20, 0x7F	; 127
 9d4:	57 e4       	ldi	r21, 0x47	; 71
 9d6:	6b 89       	ldd	r22, Y+19	; 0x13
 9d8:	7c 89       	ldd	r23, Y+20	; 0x14
 9da:	8d 89       	ldd	r24, Y+21	; 0x15
 9dc:	9e 89       	ldd	r25, Y+22	; 0x16
 9de:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__gesf2>
 9e2:	18 16       	cp	r1, r24
 9e4:	4c f5       	brge	.+82     	; 0xa38 <__stack+0x139>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 9e6:	20 e0       	ldi	r18, 0x00	; 0
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	40 e2       	ldi	r20, 0x20	; 32
 9ec:	51 e4       	ldi	r21, 0x41	; 65
 9ee:	69 81       	ldd	r22, Y+1	; 0x01
 9f0:	7a 81       	ldd	r23, Y+2	; 0x02
 9f2:	8b 81       	ldd	r24, Y+3	; 0x03
 9f4:	9c 81       	ldd	r25, Y+4	; 0x04
 9f6:	0e 94 5f 07 	call	0xebe	; 0xebe <__mulsf3>
 9fa:	dc 01       	movw	r26, r24
 9fc:	cb 01       	movw	r24, r22
 9fe:	bc 01       	movw	r22, r24
 a00:	cd 01       	movw	r24, r26
 a02:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fixunssfsi>
 a06:	dc 01       	movw	r26, r24
 a08:	cb 01       	movw	r24, r22
 a0a:	98 8f       	std	Y+24, r25	; 0x18
 a0c:	8f 8b       	std	Y+23, r24	; 0x17
 a0e:	0f c0       	rjmp	.+30     	; 0xa2e <__stack+0x12f>
 a10:	80 e9       	ldi	r24, 0x90	; 144
 a12:	91 e0       	ldi	r25, 0x01	; 1
 a14:	9a 8f       	std	Y+26, r25	; 0x1a
 a16:	89 8f       	std	Y+25, r24	; 0x19
 a18:	89 8d       	ldd	r24, Y+25	; 0x19
 a1a:	9a 8d       	ldd	r25, Y+26	; 0x1a
 a1c:	01 97       	sbiw	r24, 0x01	; 1
 a1e:	f1 f7       	brne	.-4      	; 0xa1c <__stack+0x11d>
 a20:	9a 8f       	std	Y+26, r25	; 0x1a
 a22:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a24:	8f 89       	ldd	r24, Y+23	; 0x17
 a26:	98 8d       	ldd	r25, Y+24	; 0x18
 a28:	01 97       	sbiw	r24, 0x01	; 1
 a2a:	98 8f       	std	Y+24, r25	; 0x18
 a2c:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 a2e:	8f 89       	ldd	r24, Y+23	; 0x17
 a30:	98 8d       	ldd	r25, Y+24	; 0x18
 a32:	89 2b       	or	r24, r25
 a34:	69 f7       	brne	.-38     	; 0xa10 <__stack+0x111>
 a36:	14 c0       	rjmp	.+40     	; 0xa60 <__stack+0x161>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 a38:	6b 89       	ldd	r22, Y+19	; 0x13
 a3a:	7c 89       	ldd	r23, Y+20	; 0x14
 a3c:	8d 89       	ldd	r24, Y+21	; 0x15
 a3e:	9e 89       	ldd	r25, Y+22	; 0x16
 a40:	0e 94 de 06 	call	0xdbc	; 0xdbc <__fixunssfsi>
 a44:	dc 01       	movw	r26, r24
 a46:	cb 01       	movw	r24, r22
 a48:	98 8f       	std	Y+24, r25	; 0x18
 a4a:	8f 8b       	std	Y+23, r24	; 0x17
 a4c:	8f 89       	ldd	r24, Y+23	; 0x17
 a4e:	98 8d       	ldd	r25, Y+24	; 0x18
 a50:	9c 8f       	std	Y+28, r25	; 0x1c
 a52:	8b 8f       	std	Y+27, r24	; 0x1b
 a54:	8b 8d       	ldd	r24, Y+27	; 0x1b
 a56:	9c 8d       	ldd	r25, Y+28	; 0x1c
 a58:	01 97       	sbiw	r24, 0x01	; 1
 a5a:	f1 f7       	brne	.-4      	; 0xa58 <__stack+0x159>
 a5c:	9c 8f       	std	Y+28, r25	; 0x1c
 a5e:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(50);


		//-----Application Softwares-----//
		/*DS3231*/
		if(TWCR & (1 << TWINT))
 a60:	8c eb       	ldi	r24, 0xBC	; 188
 a62:	90 e0       	ldi	r25, 0x00	; 0
 a64:	fc 01       	movw	r30, r24
 a66:	80 81       	ld	r24, Z
 a68:	88 23       	and	r24, r24
 a6a:	0c f0       	brlt	.+2      	; 0xa6e <__stack+0x16f>
 a6c:	7d cf       	rjmp	.-262    	; 0x968 <__stack+0x69>
		{
			if(I2C_Do_Communication() == I2C_COMPLETED)
 a6e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <I2C_Do_Communication>
 a72:	81 30       	cpi	r24, 0x01	; 1
 a74:	09 f0       	breq	.+2      	; 0xa78 <__stack+0x179>
 a76:	78 cf       	rjmp	.-272    	; 0x968 <__stack+0x69>
			{
				I2C_Start_Communication(SLAVE_ADDRESS);
 a78:	88 e6       	ldi	r24, 0x68	; 104
 a7a:	0e 94 c4 02 	call	0x588	; 0x588 <I2C_Start_Communication>

				/*Print Seconds Example - DS3231*/
				USART0_Send_Data(Get_Date_Time());
 a7e:	0e 94 53 00 	call	0xa6	; 0xa6 <Get_Date_Time>
 a82:	0e 94 00 06 	call	0xc00	; 0xc00 <USART0_Send_Data>
			}
			else
				;//Till not completed, so, wait
		}
	}
 a86:	70 cf       	rjmp	.-288    	; 0x968 <__stack+0x69>

00000a88 <USART0_Init>:
 * ubrr: Contains desired baud rate for user.
 *
 * returns: It returns nothing.
 */
void USART0_Init(unsigned int ubrr)
{
 a88:	cf 93       	push	r28
 a8a:	df 93       	push	r29
 a8c:	00 d0       	rcall	.+0      	; 0xa8e <USART0_Init+0x6>
 a8e:	cd b7       	in	r28, 0x3d	; 61
 a90:	de b7       	in	r29, 0x3e	; 62
 a92:	9a 83       	std	Y+2, r25	; 0x02
 a94:	89 83       	std	Y+1, r24	; 0x01
	//---------Set baud rate---------//
	ubrr = ubrr + 1;					/*ubrr correction*/
 a96:	89 81       	ldd	r24, Y+1	; 0x01
 a98:	9a 81       	ldd	r25, Y+2	; 0x02
 a9a:	01 96       	adiw	r24, 0x01	; 1
 a9c:	9a 83       	std	Y+2, r25	; 0x02
 a9e:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = (unsigned char) (ubrr >> 8);
 aa0:	85 ec       	ldi	r24, 0xC5	; 197
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	29 81       	ldd	r18, Y+1	; 0x01
 aa6:	3a 81       	ldd	r19, Y+2	; 0x02
 aa8:	23 2f       	mov	r18, r19
 aaa:	33 27       	eor	r19, r19
 aac:	fc 01       	movw	r30, r24
 aae:	20 83       	st	Z, r18
	UBRR0L = (unsigned char) ubrr;
 ab0:	84 ec       	ldi	r24, 0xC4	; 196
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	29 81       	ldd	r18, Y+1	; 0x01
 ab6:	fc 01       	movw	r30, r24
 ab8:	20 83       	st	Z, r18

	//-----Control Register UCSRnA---//
	CLEAR_BIT(UCSR0A, MPCM0);			/*Disable Multi processor comm mode*/
 aba:	80 ec       	ldi	r24, 0xC0	; 192
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	20 ec       	ldi	r18, 0xC0	; 192
 ac0:	30 e0       	ldi	r19, 0x00	; 0
 ac2:	f9 01       	movw	r30, r18
 ac4:	20 81       	ld	r18, Z
 ac6:	2e 7f       	andi	r18, 0xFE	; 254
 ac8:	fc 01       	movw	r30, r24
 aca:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0A, U2X0); 			/*Clock Divider is 16*/
 acc:	80 ec       	ldi	r24, 0xC0	; 192
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	20 ec       	ldi	r18, 0xC0	; 192
 ad2:	30 e0       	ldi	r19, 0x00	; 0
 ad4:	f9 01       	movw	r30, r18
 ad6:	20 81       	ld	r18, Z
 ad8:	2d 7f       	andi	r18, 0xFD	; 253
 ada:	fc 01       	movw	r30, r24
 adc:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0A, TXC0); 			/*No Transmission now*/
 ade:	80 ec       	ldi	r24, 0xC0	; 192
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	20 ec       	ldi	r18, 0xC0	; 192
 ae4:	30 e0       	ldi	r19, 0x00	; 0
 ae6:	f9 01       	movw	r30, r18
 ae8:	20 81       	ld	r18, Z
 aea:	2f 7b       	andi	r18, 0xBF	; 191
 aec:	fc 01       	movw	r30, r24
 aee:	20 83       	st	Z, r18

	//-----Control Register UCSRnB---//
	CLEAR_BIT(UCSR0B, UCSZ02);			/*Data length is 8 bit*/
 af0:	81 ec       	ldi	r24, 0xC1	; 193
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	21 ec       	ldi	r18, 0xC1	; 193
 af6:	30 e0       	ldi	r19, 0x00	; 0
 af8:	f9 01       	movw	r30, r18
 afa:	20 81       	ld	r18, Z
 afc:	2b 7f       	andi	r18, 0xFB	; 251
 afe:	fc 01       	movw	r30, r24
 b00:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, RXEN0);			/*Disabled USART0 Receiver*/
 b02:	81 ec       	ldi	r24, 0xC1	; 193
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	21 ec       	ldi	r18, 0xC1	; 193
 b08:	30 e0       	ldi	r19, 0x00	; 0
 b0a:	f9 01       	movw	r30, r18
 b0c:	20 81       	ld	r18, Z
 b0e:	2f 7e       	andi	r18, 0xEF	; 239
 b10:	fc 01       	movw	r30, r24
 b12:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, UDRIE0);			/*Disabled - Data Buffer Empty Interrupt*/
 b14:	81 ec       	ldi	r24, 0xC1	; 193
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	21 ec       	ldi	r18, 0xC1	; 193
 b1a:	30 e0       	ldi	r19, 0x00	; 0
 b1c:	f9 01       	movw	r30, r18
 b1e:	20 81       	ld	r18, Z
 b20:	2f 7d       	andi	r18, 0xDF	; 223
 b22:	fc 01       	movw	r30, r24
 b24:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, TXCIE0);			/*Disabled - Data transmission completed Interrupt*/
 b26:	81 ec       	ldi	r24, 0xC1	; 193
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	21 ec       	ldi	r18, 0xC1	; 193
 b2c:	30 e0       	ldi	r19, 0x00	; 0
 b2e:	f9 01       	movw	r30, r18
 b30:	20 81       	ld	r18, Z
 b32:	2f 7b       	andi	r18, 0xBF	; 191
 b34:	fc 01       	movw	r30, r24
 b36:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, RXCIE0);			/*Disabled - Data receive completed Interrupt*/
 b38:	81 ec       	ldi	r24, 0xC1	; 193
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	21 ec       	ldi	r18, 0xC1	; 193
 b3e:	30 e0       	ldi	r19, 0x00	; 0
 b40:	f9 01       	movw	r30, r18
 b42:	20 81       	ld	r18, Z
 b44:	2f 77       	andi	r18, 0x7F	; 127
 b46:	fc 01       	movw	r30, r24
 b48:	20 83       	st	Z, r18

	//-----Control Register UCSRnC---//
	CLEAR_BIT(UCSR0C, UCPOL0);			/*Async Mode only*/
 b4a:	82 ec       	ldi	r24, 0xC2	; 194
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	22 ec       	ldi	r18, 0xC2	; 194
 b50:	30 e0       	ldi	r19, 0x00	; 0
 b52:	f9 01       	movw	r30, r18
 b54:	20 81       	ld	r18, Z
 b56:	2e 7f       	andi	r18, 0xFE	; 254
 b58:	fc 01       	movw	r30, r24
 b5a:	20 83       	st	Z, r18
	/*Data Length*/
	SET_BIT(UCSR0B, UCSZ00);			/*Data length is 8 bit*/
 b5c:	81 ec       	ldi	r24, 0xC1	; 193
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	21 ec       	ldi	r18, 0xC1	; 193
 b62:	30 e0       	ldi	r19, 0x00	; 0
 b64:	f9 01       	movw	r30, r18
 b66:	20 81       	ld	r18, Z
 b68:	22 60       	ori	r18, 0x02	; 2
 b6a:	fc 01       	movw	r30, r24
 b6c:	20 83       	st	Z, r18
	SET_BIT(UCSR0B, UCSZ01);			/*Data length is 8 bit*/
 b6e:	81 ec       	ldi	r24, 0xC1	; 193
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	21 ec       	ldi	r18, 0xC1	; 193
 b74:	30 e0       	ldi	r19, 0x00	; 0
 b76:	f9 01       	movw	r30, r18
 b78:	20 81       	ld	r18, Z
 b7a:	24 60       	ori	r18, 0x04	; 4
 b7c:	fc 01       	movw	r30, r24
 b7e:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, USBS0);			/*One Stop Bit*/
 b80:	81 ec       	ldi	r24, 0xC1	; 193
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	21 ec       	ldi	r18, 0xC1	; 193
 b86:	30 e0       	ldi	r19, 0x00	; 0
 b88:	f9 01       	movw	r30, r18
 b8a:	20 81       	ld	r18, Z
 b8c:	27 7f       	andi	r18, 0xF7	; 247
 b8e:	fc 01       	movw	r30, r24
 b90:	20 83       	st	Z, r18
	/*Parity*/
	CLEAR_BIT(UCSR0B, UPM00);			/*Parity - Even*/
 b92:	81 ec       	ldi	r24, 0xC1	; 193
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	21 ec       	ldi	r18, 0xC1	; 193
 b98:	30 e0       	ldi	r19, 0x00	; 0
 b9a:	f9 01       	movw	r30, r18
 b9c:	20 81       	ld	r18, Z
 b9e:	2f 7e       	andi	r18, 0xEF	; 239
 ba0:	fc 01       	movw	r30, r24
 ba2:	20 83       	st	Z, r18
	SET_BIT(UCSR0B, UPM01);				/*Parity - Even*/
 ba4:	81 ec       	ldi	r24, 0xC1	; 193
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	21 ec       	ldi	r18, 0xC1	; 193
 baa:	30 e0       	ldi	r19, 0x00	; 0
 bac:	f9 01       	movw	r30, r18
 bae:	20 81       	ld	r18, Z
 bb0:	20 62       	ori	r18, 0x20	; 32
 bb2:	fc 01       	movw	r30, r24
 bb4:	20 83       	st	Z, r18
	/*Mode Selection*/
	CLEAR_BIT(UCSR0B, UMSEL00);			/*Mode - Async Mode*/
 bb6:	81 ec       	ldi	r24, 0xC1	; 193
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	21 ec       	ldi	r18, 0xC1	; 193
 bbc:	30 e0       	ldi	r19, 0x00	; 0
 bbe:	f9 01       	movw	r30, r18
 bc0:	20 81       	ld	r18, Z
 bc2:	2f 7b       	andi	r18, 0xBF	; 191
 bc4:	fc 01       	movw	r30, r24
 bc6:	20 83       	st	Z, r18
	CLEAR_BIT(UCSR0B, UMSEL01);			/*Mode - Async Mode*/
 bc8:	81 ec       	ldi	r24, 0xC1	; 193
 bca:	90 e0       	ldi	r25, 0x00	; 0
 bcc:	21 ec       	ldi	r18, 0xC1	; 193
 bce:	30 e0       	ldi	r19, 0x00	; 0
 bd0:	f9 01       	movw	r30, r18
 bd2:	20 81       	ld	r18, Z
 bd4:	2f 77       	andi	r18, 0x7F	; 127
 bd6:	fc 01       	movw	r30, r24
 bd8:	20 83       	st	Z, r18

	//-------Make Register Ready-----//
	UDR0 = '\0';						/*Clear Transmit Register*/
 bda:	86 ec       	ldi	r24, 0xC6	; 198
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	fc 01       	movw	r30, r24
 be0:	10 82       	st	Z, r1

	//-------Turn On Transmitter-----//
	SET_BIT(UCSR0B, TXEN0);				/*Enabled USART0 Transmitter*/
 be2:	81 ec       	ldi	r24, 0xC1	; 193
 be4:	90 e0       	ldi	r25, 0x00	; 0
 be6:	21 ec       	ldi	r18, 0xC1	; 193
 be8:	30 e0       	ldi	r19, 0x00	; 0
 bea:	f9 01       	movw	r30, r18
 bec:	20 81       	ld	r18, Z
 bee:	28 60       	ori	r18, 0x08	; 8
 bf0:	fc 01       	movw	r30, r24
 bf2:	20 83       	st	Z, r18
}
 bf4:	00 00       	nop
 bf6:	0f 90       	pop	r0
 bf8:	0f 90       	pop	r0
 bfa:	df 91       	pop	r29
 bfc:	cf 91       	pop	r28
 bfe:	08 95       	ret

00000c00 <USART0_Send_Data>:
 * * _data: Pointer to incoming character array.
 *
 * returns: It returns nothing.
 */
void USART0_Send_Data( register char * _data)
{
 c00:	1f 93       	push	r17
 c02:	cf 93       	push	r28
 c04:	df 93       	push	r29
 c06:	cd b7       	in	r28, 0x3d	; 61
 c08:	de b7       	in	r29, 0x3e	; 62
	register uint8_t i = 0;
 c0a:	10 e0       	ldi	r17, 0x00	; 0
	while(*_data != '\0')				/*Load data to serial_buffer*/
 c0c:	0f c0       	rjmp	.+30     	; 0xc2c <USART0_Send_Data+0x2c>
	{
		serial_buffer[i++] = *(_data++);
 c0e:	21 2f       	mov	r18, r17
 c10:	11 e0       	ldi	r17, 0x01	; 1
 c12:	12 0f       	add	r17, r18
 c14:	42 2f       	mov	r20, r18
 c16:	50 e0       	ldi	r21, 0x00	; 0
 c18:	9c 01       	movw	r18, r24
 c1a:	c9 01       	movw	r24, r18
 c1c:	01 96       	adiw	r24, 0x01	; 1
 c1e:	f9 01       	movw	r30, r18
 c20:	60 81       	ld	r22, Z
 c22:	9a 01       	movw	r18, r20
 c24:	20 58       	subi	r18, 0x80	; 128
 c26:	3e 4f       	sbci	r19, 0xFE	; 254
 c28:	f9 01       	movw	r30, r18
 c2a:	60 83       	st	Z, r22
 * returns: It returns nothing.
 */
void USART0_Send_Data( register char * _data)
{
	register uint8_t i = 0;
	while(*_data != '\0')				/*Load data to serial_buffer*/
 c2c:	fc 01       	movw	r30, r24
 c2e:	20 81       	ld	r18, Z
 c30:	22 23       	and	r18, r18
 c32:	69 f7       	brne	.-38     	; 0xc0e <USART0_Send_Data+0xe>
	{
		serial_buffer[i++] = *(_data++);
	}
	serial_buffer[i] = '\n';
 c34:	81 2f       	mov	r24, r17
 c36:	90 e0       	ldi	r25, 0x00	; 0
 c38:	80 58       	subi	r24, 0x80	; 128
 c3a:	9e 4f       	sbci	r25, 0xFE	; 254
 c3c:	2a e0       	ldi	r18, 0x0A	; 10
 c3e:	fc 01       	movw	r30, r24
 c40:	20 83       	st	Z, r18
	buffer_pointer = serial_buffer;		/*Set serial buffer pointer*/
 c42:	80 e8       	ldi	r24, 0x80	; 128
 c44:	91 e0       	ldi	r25, 0x01	; 1
 c46:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <buffer_pointer+0x1>
 c4a:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <buffer_pointer>

	SET_BIT(UCSR0B, UDRIE0);			/*Enabled - Data Buffer Empty Interrupt*/
 c4e:	81 ec       	ldi	r24, 0xC1	; 193
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	21 ec       	ldi	r18, 0xC1	; 193
 c54:	30 e0       	ldi	r19, 0x00	; 0
 c56:	f9 01       	movw	r30, r18
 c58:	20 81       	ld	r18, Z
 c5a:	20 62       	ori	r18, 0x20	; 32
 c5c:	fc 01       	movw	r30, r24
 c5e:	20 83       	st	Z, r18
	SET_BIT(UCSR0B, TXCIE0);			/*Enabled - Data transmission completed Interrupt*/
 c60:	81 ec       	ldi	r24, 0xC1	; 193
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	21 ec       	ldi	r18, 0xC1	; 193
 c66:	30 e0       	ldi	r19, 0x00	; 0
 c68:	f9 01       	movw	r30, r18
 c6a:	20 81       	ld	r18, Z
 c6c:	20 64       	ori	r18, 0x40	; 64
 c6e:	fc 01       	movw	r30, r24
 c70:	20 83       	st	Z, r18
}
 c72:	00 00       	nop
 c74:	df 91       	pop	r29
 c76:	cf 91       	pop	r28
 c78:	1f 91       	pop	r17
 c7a:	08 95       	ret

00000c7c <__vector_19>:
 * transmitted.
 *
 * retuns: It returns nothing.
 */
ISR(USART_UDRE_vect)
{
 c7c:	1f 92       	push	r1
 c7e:	0f 92       	push	r0
 c80:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 c84:	0f 92       	push	r0
 c86:	11 24       	eor	r1, r1
 c88:	2f 93       	push	r18
 c8a:	3f 93       	push	r19
 c8c:	4f 93       	push	r20
 c8e:	5f 93       	push	r21
 c90:	8f 93       	push	r24
 c92:	9f 93       	push	r25
 c94:	ef 93       	push	r30
 c96:	ff 93       	push	r31
 c98:	cf 93       	push	r28
 c9a:	df 93       	push	r29
 c9c:	cd b7       	in	r28, 0x3d	; 61
 c9e:	de b7       	in	r29, 0x3e	; 62
	if(*buffer_pointer != '\n')
 ca0:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <buffer_pointer>
 ca4:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <buffer_pointer+0x1>
 ca8:	fc 01       	movw	r30, r24
 caa:	80 81       	ld	r24, Z
 cac:	8a 30       	cpi	r24, 0x0A	; 10
 cae:	91 f0       	breq	.+36     	; 0xcd4 <__vector_19+0x58>
	{
		UDR0 = *(buffer_pointer++);		/*Load Next Data Byte*/
 cb0:	26 ec       	ldi	r18, 0xC6	; 198
 cb2:	30 e0       	ldi	r19, 0x00	; 0
 cb4:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <buffer_pointer>
 cb8:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <buffer_pointer+0x1>
 cbc:	ac 01       	movw	r20, r24
 cbe:	4f 5f       	subi	r20, 0xFF	; 255
 cc0:	5f 4f       	sbci	r21, 0xFF	; 255
 cc2:	50 93 e5 01 	sts	0x01E5, r21	; 0x8001e5 <buffer_pointer+0x1>
 cc6:	40 93 e4 01 	sts	0x01E4, r20	; 0x8001e4 <buffer_pointer>
 cca:	fc 01       	movw	r30, r24
 ccc:	80 81       	ld	r24, Z
 cce:	f9 01       	movw	r30, r18
 cd0:	80 83       	st	Z, r24
	else
	{
		UDR0 = '\n';
		CLEAR_BIT(UCSR0B, UDRIE0);		/*Disabled - Data Buffer Empty Interrupt*/
	}
}
 cd2:	0e c0       	rjmp	.+28     	; 0xcf0 <__vector_19+0x74>
	{
		UDR0 = *(buffer_pointer++);		/*Load Next Data Byte*/
	}
	else
	{
		UDR0 = '\n';
 cd4:	86 ec       	ldi	r24, 0xC6	; 198
 cd6:	90 e0       	ldi	r25, 0x00	; 0
 cd8:	2a e0       	ldi	r18, 0x0A	; 10
 cda:	fc 01       	movw	r30, r24
 cdc:	20 83       	st	Z, r18
		CLEAR_BIT(UCSR0B, UDRIE0);		/*Disabled - Data Buffer Empty Interrupt*/
 cde:	81 ec       	ldi	r24, 0xC1	; 193
 ce0:	90 e0       	ldi	r25, 0x00	; 0
 ce2:	21 ec       	ldi	r18, 0xC1	; 193
 ce4:	30 e0       	ldi	r19, 0x00	; 0
 ce6:	f9 01       	movw	r30, r18
 ce8:	20 81       	ld	r18, Z
 cea:	2f 7d       	andi	r18, 0xDF	; 223
 cec:	fc 01       	movw	r30, r24
 cee:	20 83       	st	Z, r18
	}
}
 cf0:	00 00       	nop
 cf2:	df 91       	pop	r29
 cf4:	cf 91       	pop	r28
 cf6:	ff 91       	pop	r31
 cf8:	ef 91       	pop	r30
 cfa:	9f 91       	pop	r25
 cfc:	8f 91       	pop	r24
 cfe:	5f 91       	pop	r21
 d00:	4f 91       	pop	r20
 d02:	3f 91       	pop	r19
 d04:	2f 91       	pop	r18
 d06:	0f 90       	pop	r0
 d08:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 d0c:	0f 90       	pop	r0
 d0e:	1f 90       	pop	r1
 d10:	18 95       	reti

00000d12 <__vector_20>:
 * bytes are transmitted.
 *
 * retuns: It returns nothing.
 */
ISR(USART_TX_vect)
{
 d12:	1f 92       	push	r1
 d14:	0f 92       	push	r0
 d16:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 d1a:	0f 92       	push	r0
 d1c:	11 24       	eor	r1, r1
 d1e:	2f 93       	push	r18
 d20:	3f 93       	push	r19
 d22:	8f 93       	push	r24
 d24:	9f 93       	push	r25
 d26:	ef 93       	push	r30
 d28:	ff 93       	push	r31
 d2a:	cf 93       	push	r28
 d2c:	df 93       	push	r29
 d2e:	cd b7       	in	r28, 0x3d	; 61
 d30:	de b7       	in	r29, 0x3e	; 62
	/* The TXCn Flag bit is automatically cleared,
	 * when a transmit complete interrupt is executed
	 */

	CLEAR_BIT(UCSR0B, TXCIE0);			/*Disabled - Data transmission completed Interrupt*/
 d32:	81 ec       	ldi	r24, 0xC1	; 193
 d34:	90 e0       	ldi	r25, 0x00	; 0
 d36:	21 ec       	ldi	r18, 0xC1	; 193
 d38:	30 e0       	ldi	r19, 0x00	; 0
 d3a:	f9 01       	movw	r30, r18
 d3c:	20 81       	ld	r18, Z
 d3e:	2f 7b       	andi	r18, 0xBF	; 191
 d40:	fc 01       	movw	r30, r24
 d42:	20 83       	st	Z, r18
}
 d44:	00 00       	nop
 d46:	df 91       	pop	r29
 d48:	cf 91       	pop	r28
 d4a:	ff 91       	pop	r31
 d4c:	ef 91       	pop	r30
 d4e:	9f 91       	pop	r25
 d50:	8f 91       	pop	r24
 d52:	3f 91       	pop	r19
 d54:	2f 91       	pop	r18
 d56:	0f 90       	pop	r0
 d58:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 d5c:	0f 90       	pop	r0
 d5e:	1f 90       	pop	r1
 d60:	18 95       	reti

00000d62 <__divmodhi4>:
 d62:	97 fb       	bst	r25, 7
 d64:	07 2e       	mov	r0, r23
 d66:	16 f4       	brtc	.+4      	; 0xd6c <__divmodhi4+0xa>
 d68:	00 94       	com	r0
 d6a:	07 d0       	rcall	.+14     	; 0xd7a <__divmodhi4_neg1>
 d6c:	77 fd       	sbrc	r23, 7
 d6e:	09 d0       	rcall	.+18     	; 0xd82 <__divmodhi4_neg2>
 d70:	0e 94 c5 06 	call	0xd8a	; 0xd8a <__udivmodhi4>
 d74:	07 fc       	sbrc	r0, 7
 d76:	05 d0       	rcall	.+10     	; 0xd82 <__divmodhi4_neg2>
 d78:	3e f4       	brtc	.+14     	; 0xd88 <__divmodhi4_exit>

00000d7a <__divmodhi4_neg1>:
 d7a:	90 95       	com	r25
 d7c:	81 95       	neg	r24
 d7e:	9f 4f       	sbci	r25, 0xFF	; 255
 d80:	08 95       	ret

00000d82 <__divmodhi4_neg2>:
 d82:	70 95       	com	r23
 d84:	61 95       	neg	r22
 d86:	7f 4f       	sbci	r23, 0xFF	; 255

00000d88 <__divmodhi4_exit>:
 d88:	08 95       	ret

00000d8a <__udivmodhi4>:
 d8a:	aa 1b       	sub	r26, r26
 d8c:	bb 1b       	sub	r27, r27
 d8e:	51 e1       	ldi	r21, 0x11	; 17
 d90:	07 c0       	rjmp	.+14     	; 0xda0 <__udivmodhi4_ep>

00000d92 <__udivmodhi4_loop>:
 d92:	aa 1f       	adc	r26, r26
 d94:	bb 1f       	adc	r27, r27
 d96:	a6 17       	cp	r26, r22
 d98:	b7 07       	cpc	r27, r23
 d9a:	10 f0       	brcs	.+4      	; 0xda0 <__udivmodhi4_ep>
 d9c:	a6 1b       	sub	r26, r22
 d9e:	b7 0b       	sbc	r27, r23

00000da0 <__udivmodhi4_ep>:
 da0:	88 1f       	adc	r24, r24
 da2:	99 1f       	adc	r25, r25
 da4:	5a 95       	dec	r21
 da6:	a9 f7       	brne	.-22     	; 0xd92 <__udivmodhi4_loop>
 da8:	80 95       	com	r24
 daa:	90 95       	com	r25
 dac:	bc 01       	movw	r22, r24
 dae:	cd 01       	movw	r24, r26
 db0:	08 95       	ret

00000db2 <__cmpsf2>:
 db2:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_cmp>
 db6:	08 f4       	brcc	.+2      	; 0xdba <__cmpsf2+0x8>
 db8:	81 e0       	ldi	r24, 0x01	; 1
 dba:	08 95       	ret

00000dbc <__fixunssfsi>:
 dbc:	0e 94 39 07 	call	0xe72	; 0xe72 <__fp_splitA>
 dc0:	88 f0       	brcs	.+34     	; 0xde4 <__fixunssfsi+0x28>
 dc2:	9f 57       	subi	r25, 0x7F	; 127
 dc4:	98 f0       	brcs	.+38     	; 0xdec <__fixunssfsi+0x30>
 dc6:	b9 2f       	mov	r27, r25
 dc8:	99 27       	eor	r25, r25
 dca:	b7 51       	subi	r27, 0x17	; 23
 dcc:	b0 f0       	brcs	.+44     	; 0xdfa <__fixunssfsi+0x3e>
 dce:	e1 f0       	breq	.+56     	; 0xe08 <__fixunssfsi+0x4c>
 dd0:	66 0f       	add	r22, r22
 dd2:	77 1f       	adc	r23, r23
 dd4:	88 1f       	adc	r24, r24
 dd6:	99 1f       	adc	r25, r25
 dd8:	1a f0       	brmi	.+6      	; 0xde0 <__fixunssfsi+0x24>
 dda:	ba 95       	dec	r27
 ddc:	c9 f7       	brne	.-14     	; 0xdd0 <__fixunssfsi+0x14>
 dde:	14 c0       	rjmp	.+40     	; 0xe08 <__fixunssfsi+0x4c>
 de0:	b1 30       	cpi	r27, 0x01	; 1
 de2:	91 f0       	breq	.+36     	; 0xe08 <__fixunssfsi+0x4c>
 de4:	0e 94 53 07 	call	0xea6	; 0xea6 <__fp_zero>
 de8:	b1 e0       	ldi	r27, 0x01	; 1
 dea:	08 95       	ret
 dec:	0c 94 53 07 	jmp	0xea6	; 0xea6 <__fp_zero>
 df0:	67 2f       	mov	r22, r23
 df2:	78 2f       	mov	r23, r24
 df4:	88 27       	eor	r24, r24
 df6:	b8 5f       	subi	r27, 0xF8	; 248
 df8:	39 f0       	breq	.+14     	; 0xe08 <__fixunssfsi+0x4c>
 dfa:	b9 3f       	cpi	r27, 0xF9	; 249
 dfc:	cc f3       	brlt	.-14     	; 0xdf0 <__fixunssfsi+0x34>
 dfe:	86 95       	lsr	r24
 e00:	77 95       	ror	r23
 e02:	67 95       	ror	r22
 e04:	b3 95       	inc	r27
 e06:	d9 f7       	brne	.-10     	; 0xdfe <__fixunssfsi+0x42>
 e08:	3e f4       	brtc	.+14     	; 0xe18 <__fixunssfsi+0x5c>
 e0a:	90 95       	com	r25
 e0c:	80 95       	com	r24
 e0e:	70 95       	com	r23
 e10:	61 95       	neg	r22
 e12:	7f 4f       	sbci	r23, 0xFF	; 255
 e14:	8f 4f       	sbci	r24, 0xFF	; 255
 e16:	9f 4f       	sbci	r25, 0xFF	; 255
 e18:	08 95       	ret

00000e1a <__fp_cmp>:
 e1a:	99 0f       	add	r25, r25
 e1c:	00 08       	sbc	r0, r0
 e1e:	55 0f       	add	r21, r21
 e20:	aa 0b       	sbc	r26, r26
 e22:	e0 e8       	ldi	r30, 0x80	; 128
 e24:	fe ef       	ldi	r31, 0xFE	; 254
 e26:	16 16       	cp	r1, r22
 e28:	17 06       	cpc	r1, r23
 e2a:	e8 07       	cpc	r30, r24
 e2c:	f9 07       	cpc	r31, r25
 e2e:	c0 f0       	brcs	.+48     	; 0xe60 <__fp_cmp+0x46>
 e30:	12 16       	cp	r1, r18
 e32:	13 06       	cpc	r1, r19
 e34:	e4 07       	cpc	r30, r20
 e36:	f5 07       	cpc	r31, r21
 e38:	98 f0       	brcs	.+38     	; 0xe60 <__fp_cmp+0x46>
 e3a:	62 1b       	sub	r22, r18
 e3c:	73 0b       	sbc	r23, r19
 e3e:	84 0b       	sbc	r24, r20
 e40:	95 0b       	sbc	r25, r21
 e42:	39 f4       	brne	.+14     	; 0xe52 <__fp_cmp+0x38>
 e44:	0a 26       	eor	r0, r26
 e46:	61 f0       	breq	.+24     	; 0xe60 <__fp_cmp+0x46>
 e48:	23 2b       	or	r18, r19
 e4a:	24 2b       	or	r18, r20
 e4c:	25 2b       	or	r18, r21
 e4e:	21 f4       	brne	.+8      	; 0xe58 <__fp_cmp+0x3e>
 e50:	08 95       	ret
 e52:	0a 26       	eor	r0, r26
 e54:	09 f4       	brne	.+2      	; 0xe58 <__fp_cmp+0x3e>
 e56:	a1 40       	sbci	r26, 0x01	; 1
 e58:	a6 95       	lsr	r26
 e5a:	8f ef       	ldi	r24, 0xFF	; 255
 e5c:	81 1d       	adc	r24, r1
 e5e:	81 1d       	adc	r24, r1
 e60:	08 95       	ret

00000e62 <__fp_split3>:
 e62:	57 fd       	sbrc	r21, 7
 e64:	90 58       	subi	r25, 0x80	; 128
 e66:	44 0f       	add	r20, r20
 e68:	55 1f       	adc	r21, r21
 e6a:	59 f0       	breq	.+22     	; 0xe82 <__fp_splitA+0x10>
 e6c:	5f 3f       	cpi	r21, 0xFF	; 255
 e6e:	71 f0       	breq	.+28     	; 0xe8c <__fp_splitA+0x1a>
 e70:	47 95       	ror	r20

00000e72 <__fp_splitA>:
 e72:	88 0f       	add	r24, r24
 e74:	97 fb       	bst	r25, 7
 e76:	99 1f       	adc	r25, r25
 e78:	61 f0       	breq	.+24     	; 0xe92 <__fp_splitA+0x20>
 e7a:	9f 3f       	cpi	r25, 0xFF	; 255
 e7c:	79 f0       	breq	.+30     	; 0xe9c <__fp_splitA+0x2a>
 e7e:	87 95       	ror	r24
 e80:	08 95       	ret
 e82:	12 16       	cp	r1, r18
 e84:	13 06       	cpc	r1, r19
 e86:	14 06       	cpc	r1, r20
 e88:	55 1f       	adc	r21, r21
 e8a:	f2 cf       	rjmp	.-28     	; 0xe70 <__fp_split3+0xe>
 e8c:	46 95       	lsr	r20
 e8e:	f1 df       	rcall	.-30     	; 0xe72 <__fp_splitA>
 e90:	08 c0       	rjmp	.+16     	; 0xea2 <__fp_splitA+0x30>
 e92:	16 16       	cp	r1, r22
 e94:	17 06       	cpc	r1, r23
 e96:	18 06       	cpc	r1, r24
 e98:	99 1f       	adc	r25, r25
 e9a:	f1 cf       	rjmp	.-30     	; 0xe7e <__fp_splitA+0xc>
 e9c:	86 95       	lsr	r24
 e9e:	71 05       	cpc	r23, r1
 ea0:	61 05       	cpc	r22, r1
 ea2:	08 94       	sec
 ea4:	08 95       	ret

00000ea6 <__fp_zero>:
 ea6:	e8 94       	clt

00000ea8 <__fp_szero>:
 ea8:	bb 27       	eor	r27, r27
 eaa:	66 27       	eor	r22, r22
 eac:	77 27       	eor	r23, r23
 eae:	cb 01       	movw	r24, r22
 eb0:	97 f9       	bld	r25, 7
 eb2:	08 95       	ret

00000eb4 <__gesf2>:
 eb4:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_cmp>
 eb8:	08 f4       	brcc	.+2      	; 0xebc <__gesf2+0x8>
 eba:	8f ef       	ldi	r24, 0xFF	; 255
 ebc:	08 95       	ret

00000ebe <__mulsf3>:
 ebe:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3x>
 ec2:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <__fp_round>
 ec6:	0e 94 d5 07 	call	0xfaa	; 0xfaa <__fp_pscA>
 eca:	38 f0       	brcs	.+14     	; 0xeda <__mulsf3+0x1c>
 ecc:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__fp_pscB>
 ed0:	20 f0       	brcs	.+8      	; 0xeda <__mulsf3+0x1c>
 ed2:	95 23       	and	r25, r21
 ed4:	11 f0       	breq	.+4      	; 0xeda <__mulsf3+0x1c>
 ed6:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__fp_inf>
 eda:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__fp_nan>
 ede:	11 24       	eor	r1, r1
 ee0:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_szero>

00000ee4 <__mulsf3x>:
 ee4:	0e 94 31 07 	call	0xe62	; 0xe62 <__fp_split3>
 ee8:	70 f3       	brcs	.-36     	; 0xec6 <__mulsf3+0x8>

00000eea <__mulsf3_pse>:
 eea:	95 9f       	mul	r25, r21
 eec:	c1 f3       	breq	.-16     	; 0xede <__mulsf3+0x20>
 eee:	95 0f       	add	r25, r21
 ef0:	50 e0       	ldi	r21, 0x00	; 0
 ef2:	55 1f       	adc	r21, r21
 ef4:	62 9f       	mul	r22, r18
 ef6:	f0 01       	movw	r30, r0
 ef8:	72 9f       	mul	r23, r18
 efa:	bb 27       	eor	r27, r27
 efc:	f0 0d       	add	r31, r0
 efe:	b1 1d       	adc	r27, r1
 f00:	63 9f       	mul	r22, r19
 f02:	aa 27       	eor	r26, r26
 f04:	f0 0d       	add	r31, r0
 f06:	b1 1d       	adc	r27, r1
 f08:	aa 1f       	adc	r26, r26
 f0a:	64 9f       	mul	r22, r20
 f0c:	66 27       	eor	r22, r22
 f0e:	b0 0d       	add	r27, r0
 f10:	a1 1d       	adc	r26, r1
 f12:	66 1f       	adc	r22, r22
 f14:	82 9f       	mul	r24, r18
 f16:	22 27       	eor	r18, r18
 f18:	b0 0d       	add	r27, r0
 f1a:	a1 1d       	adc	r26, r1
 f1c:	62 1f       	adc	r22, r18
 f1e:	73 9f       	mul	r23, r19
 f20:	b0 0d       	add	r27, r0
 f22:	a1 1d       	adc	r26, r1
 f24:	62 1f       	adc	r22, r18
 f26:	83 9f       	mul	r24, r19
 f28:	a0 0d       	add	r26, r0
 f2a:	61 1d       	adc	r22, r1
 f2c:	22 1f       	adc	r18, r18
 f2e:	74 9f       	mul	r23, r20
 f30:	33 27       	eor	r19, r19
 f32:	a0 0d       	add	r26, r0
 f34:	61 1d       	adc	r22, r1
 f36:	23 1f       	adc	r18, r19
 f38:	84 9f       	mul	r24, r20
 f3a:	60 0d       	add	r22, r0
 f3c:	21 1d       	adc	r18, r1
 f3e:	82 2f       	mov	r24, r18
 f40:	76 2f       	mov	r23, r22
 f42:	6a 2f       	mov	r22, r26
 f44:	11 24       	eor	r1, r1
 f46:	9f 57       	subi	r25, 0x7F	; 127
 f48:	50 40       	sbci	r21, 0x00	; 0
 f4a:	9a f0       	brmi	.+38     	; 0xf72 <__mulsf3_pse+0x88>
 f4c:	f1 f0       	breq	.+60     	; 0xf8a <__mulsf3_pse+0xa0>
 f4e:	88 23       	and	r24, r24
 f50:	4a f0       	brmi	.+18     	; 0xf64 <__mulsf3_pse+0x7a>
 f52:	ee 0f       	add	r30, r30
 f54:	ff 1f       	adc	r31, r31
 f56:	bb 1f       	adc	r27, r27
 f58:	66 1f       	adc	r22, r22
 f5a:	77 1f       	adc	r23, r23
 f5c:	88 1f       	adc	r24, r24
 f5e:	91 50       	subi	r25, 0x01	; 1
 f60:	50 40       	sbci	r21, 0x00	; 0
 f62:	a9 f7       	brne	.-22     	; 0xf4e <__mulsf3_pse+0x64>
 f64:	9e 3f       	cpi	r25, 0xFE	; 254
 f66:	51 05       	cpc	r21, r1
 f68:	80 f0       	brcs	.+32     	; 0xf8a <__mulsf3_pse+0xa0>
 f6a:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__fp_inf>
 f6e:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_szero>
 f72:	5f 3f       	cpi	r21, 0xFF	; 255
 f74:	e4 f3       	brlt	.-8      	; 0xf6e <__mulsf3_pse+0x84>
 f76:	98 3e       	cpi	r25, 0xE8	; 232
 f78:	d4 f3       	brlt	.-12     	; 0xf6e <__mulsf3_pse+0x84>
 f7a:	86 95       	lsr	r24
 f7c:	77 95       	ror	r23
 f7e:	67 95       	ror	r22
 f80:	b7 95       	ror	r27
 f82:	f7 95       	ror	r31
 f84:	e7 95       	ror	r30
 f86:	9f 5f       	subi	r25, 0xFF	; 255
 f88:	c1 f7       	brne	.-16     	; 0xf7a <__mulsf3_pse+0x90>
 f8a:	fe 2b       	or	r31, r30
 f8c:	88 0f       	add	r24, r24
 f8e:	91 1d       	adc	r25, r1
 f90:	96 95       	lsr	r25
 f92:	87 95       	ror	r24
 f94:	97 f9       	bld	r25, 7
 f96:	08 95       	ret

00000f98 <__fp_inf>:
 f98:	97 f9       	bld	r25, 7
 f9a:	9f 67       	ori	r25, 0x7F	; 127
 f9c:	80 e8       	ldi	r24, 0x80	; 128
 f9e:	70 e0       	ldi	r23, 0x00	; 0
 fa0:	60 e0       	ldi	r22, 0x00	; 0
 fa2:	08 95       	ret

00000fa4 <__fp_nan>:
 fa4:	9f ef       	ldi	r25, 0xFF	; 255
 fa6:	80 ec       	ldi	r24, 0xC0	; 192
 fa8:	08 95       	ret

00000faa <__fp_pscA>:
 faa:	00 24       	eor	r0, r0
 fac:	0a 94       	dec	r0
 fae:	16 16       	cp	r1, r22
 fb0:	17 06       	cpc	r1, r23
 fb2:	18 06       	cpc	r1, r24
 fb4:	09 06       	cpc	r0, r25
 fb6:	08 95       	ret

00000fb8 <__fp_pscB>:
 fb8:	00 24       	eor	r0, r0
 fba:	0a 94       	dec	r0
 fbc:	12 16       	cp	r1, r18
 fbe:	13 06       	cpc	r1, r19
 fc0:	14 06       	cpc	r1, r20
 fc2:	05 06       	cpc	r0, r21
 fc4:	08 95       	ret

00000fc6 <__fp_round>:
 fc6:	09 2e       	mov	r0, r25
 fc8:	03 94       	inc	r0
 fca:	00 0c       	add	r0, r0
 fcc:	11 f4       	brne	.+4      	; 0xfd2 <__fp_round+0xc>
 fce:	88 23       	and	r24, r24
 fd0:	52 f0       	brmi	.+20     	; 0xfe6 <__fp_round+0x20>
 fd2:	bb 0f       	add	r27, r27
 fd4:	40 f4       	brcc	.+16     	; 0xfe6 <__fp_round+0x20>
 fd6:	bf 2b       	or	r27, r31
 fd8:	11 f4       	brne	.+4      	; 0xfde <__fp_round+0x18>
 fda:	60 ff       	sbrs	r22, 0
 fdc:	04 c0       	rjmp	.+8      	; 0xfe6 <__fp_round+0x20>
 fde:	6f 5f       	subi	r22, 0xFF	; 255
 fe0:	7f 4f       	sbci	r23, 0xFF	; 255
 fe2:	8f 4f       	sbci	r24, 0xFF	; 255
 fe4:	9f 4f       	sbci	r25, 0xFF	; 255
 fe6:	08 95       	ret

00000fe8 <_exit>:
 fe8:	f8 94       	cli

00000fea <__stop_program>:
 fea:	ff cf       	rjmp	.-2      	; 0xfea <__stop_program>
